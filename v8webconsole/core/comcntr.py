import pythoncom
import win32com.client

from datetime import datetime
from typing import List, Optional



class COMObjectWrapper:

    def __init__(self, iv8obj):
        self._iv8obj = iv8obj

    def get_underlying_com_object(self):
        return self._iv8obj


class COMConnector(COMObjectWrapper):
    """
    Примечание: любые COM-объекты не могут быть переданы между потоками напрямую,
    и должна использоваться маршализация
    pythoncom.CoInitialize()
    comobj = win32com.client.Dispatch('V83.COMConnector')
    comobj_id = pythoncom.CoMarshalInterThreadInterfaceInStream(pythoncom.IID_IDispatch, comobj)
    comobj = pythoncom.CoGetInterfaceAndReleaseStream(comobj_id, pythoncom.IID_IDispatch)

    https://mail.python.org/pipermail/python-win32/2008-June/007788.html
    """

    def __init__(self):
        pythoncom.CoInitialize()
        # В зависимости от версии платформы используется V82.COMConnector или V83.COMConnector
        try:
            v8_com_connector = win32com.client.gencache.EnsureDispatch("V83.COMConnector")
        except pythoncom.com_error:
            v8_com_connector = win32com.client.gencache.EnsureDispatch("V82.COMConnector")
        super().__init__(v8_com_connector)

    @property
    def high_bound_default(self) -> int:
        """
        Содержит верхнюю границу диапазона IP-портов сервера кластера по умолчанию.
        """
        return self._iv8obj.HighBoundDefault

    @property
    def low_bound_default(self) -> int:
        """
        Содержит нижнюю границу диапазона IP-портов сервера кластера по умолчанию.
        """
        return self._iv8obj.LowBoundDefault

    @property
    def max_connections(self) -> int:
        """
        Определяет максимальное число одновременно существующих объектов Внешнее соединение,
        созданных через данный менеджер COM-соединений. Число одновременно существующих соединений включает также
        число соединений, находящихся в пуле внешних соединений.
        Значением по умолчанию 0 (число одновременно существующих объектов Внешнее соединение не ограничено).
        Устанавливать свойству не нулевое значение можно только в том случае, если сам объект был создан в
        Multithreaded Apartment (MTA), что обеспечивает реальное функционирование самого менеджера
        и созданных им объектов Внешнее соединение в многопотоковой (multithreaded) среде.
        Если же объект был создан в Singlethreaded Apartment (STA), то реально все действия с ним и созданными им
        объектами Внешнее соединение будут выполняться в одном потоке. В этом случае, если метод Connect не сможет
        на первом проходе найти подходящее или создать новое Внешнее соединение, то выполнение этого метода зациклится,
        так как освободить уже, возможно, ненужное другое Внешнее соединение будет нельзя по той причине, что операция
        освобождения объекта Внешнее соединение должна быть выполнена в том же потоке,
        в котором уже выполняется метод Connect.
        """
        return self._iv8obj.MaxConnections

    @property
    def pool_capacity(self) -> int:
        """
        Максимальное количество соединений с информационной базой, которые могут одновременно находиться в пуле.
        """
        return self._iv8obj.PoolCapacity

    @property
    def pool_timeout(self) -> int:
        """
        Максимальное время нахождения в пуле неиспользуемого соединения с информационной базой.
        После истечения этого времени неиспользуемое соединение освобождается.
        """
        return self._iv8obj.PoolTimeout

    @property
    def ragent_port_default(self) -> int:
        """
        Содержит номер IP-порта агента сервера по умолчанию.
        """
        return self._iv8obj.RAgentPortDefault

    @property
    def rmngr_port_default(self) -> int:
        """
        Содержит номер IP-порта менеджера кластера по умолчанию.
        """
        return self._iv8obj.RMngrPortDefault

    def connect(self, connection_string: str):
        """
        Создает соединение с информационной базой 1С:Предприятия 8.
        Устанавливает соединение с информационной базой 1С:Предприятия 8
        и возвращает ссылку на объект Внешнее соединение.
        Установка соединения выполняется по следующему алгоритму:
        1. Внешнее соединение с требуемыми параметрами ищется в пуле соединений. Если найдено, то используется оно.
        2. Если Внешнее соединение с требуемыми параметрами не найдено,
        то анализируется не исчерпан ли лимит по числу одновременно существующих соединений. Если не исчерпан,
        то создается новое Внешнее соединение.
        3. Если лимит исчерпан, но при этом в пуле имеются неиспользуемые Внешнее соединение, то соединение,
        дольше всех находящееся в пуле, удаляется и создается новое Внешнее соединение.
        4. Если никаким способом найти подходящее или создать новое Внешнее соединение не удалось,
        то происходит ожидание освобождения Внешнее соединение другим потоком,
        после чего весь процесс повторяется, начиная с пункта 1.

        Строка соединения— строка, задающая параметры информационной базы, каждый из которых представляет собой фрагмент вида <Имя параметра>=<Значение>, где:

        Имя параметра — имя параметра;
        Значение — его значение.

        Фрагменты отделяются друг от друга символами ';'.
        Если значение содержит пробельные символы, то оно должно быть заключено в двойные кавычки (").
        Набор параметров определяется вариантом создаваемой информационной - базы - файловый или клиент-серверный.

        Для файлового варианта определены параметры:

        File — имя каталога, в котором размещается файл информационной базы;
        Locale — язык (страна), который будет использован при открытии или создании информационной базы.
        Допустимые значения такие же как у параметра <Форматная строка> метода Формат().
        Параметр Locale задавать не обязательно.
        Если не задан, то будут использованы региональные установки текущей информационной базы;
        DBFormat — формат базы данных (Допустимые значения: 8.2.14, 8.3.8. Значение по умолчанию — 8.2.14);
        DBPageSize — размер страницы базы данных в байтах (Допустимые значения: 4096(или 4k) , 8192(или 8k),
        16384(или 16k), 32768(или 32k), 65536(или 64k), Значение по умолчанию —  4k).

        Для клиент-серверного варианта определены параметры:

        Srvr —  имя сервера «1С:Предприятия» в формате: [<протокол>://]<адрес>[:<порт>], где:

        <протокол> – не обязателен, поддерживается только протокол TCP,
        <адрес> – имя сервера или IP-адрес сервера в форматах IPv4 или IPv6,
        <порт> – не обязателен, порт главного менеджера кластера, по умолчанию равен 1541.
        Например:

        server – указано имя сервера, остальные параметры используются по умолчанию;
        tcp://server:1641 – указан протокол, имя сервера и порт;
        127.0.0.1:1541 – указан IP-адрес сервера (в формате IPv4) и порт;
        [fe10::c47b:90b7:fa32:a2fa%12] – указан IP-адрес сервера (в формате IPv6),
        при этом протокол и порт принимают значения по умолчанию.

        Для обеспечения бесперебойной работы клиентских приложений возможно указание нескольких адресов кластера.
        Для этого:
        Значением параметра Srvr может быть список адресов кластера через запятую.
        В диалоге добавления информационной базы в клиентском приложении значением свойства
        Кластер серверов 1С:Предприятия может быть список адресов кластера через запятую.
        Ref — имя информационной базы на сервере "1С:Предприятия";
        DBMS — тип используемого сервера баз данных:

        MSSQLServer — Microsoft SQL Server;
        PostgreSQL — PostgreSQL;
        IBMDB2 — IBM DB2;
        OracleDatabase — Oracle Database.

        DBSrvr — имя сервера баз данных;
        DB — имя базы данных в сервере баз данных;
        DBUID — имя пользователя сервера баз данных;
        DBPwd — пароль пользователя сервера баз данных.
        Если пароль для пользователя сервера баз данных не задан, то данный параметр можно не указывать;
        SQLYOffs — смещение дат, используемое для хранения дат в Microsoft SQL Server.
        Может принимать значения 0 или 2000. Данный параметр задавать не обязательно.
        Если не задан, принимается значение 0;
        Locale — язык (страна), (аналогично файловому варианту);
        CrSQLDB — создать базу данных в случае ее отсутствия ("Y"|"N". "Y" — создавать базу данных в случае отсутствия,
        "N" — не создавать. Значение по умолчанию — N).
        SchJobDn — в созданной информационной базе запретить выполнение регламентных созданий (Y/N).
        Значение по умолчанию — N;
        SUsr — имя администратора кластера, в котором должен быть создан начальный образ. Параметр необходимо задавать,
        если в кластере определены администраторы
        и для них аутентификация операционной системы не установлена или не подходит;
        SPwd — пароль администратора кластера.

        Для всех вариантов определены параметры:

        Usr — имя пользователя;
        Pwd — пароль;
        LicDstr — разрешить получение клиентских лицензий через сервер "1С:Предприятия" ("Y"|"N").

        "Y" — получать клиентскую лицензию через сервер "1С:Предприятия".
        Если клиентское приложение не получило программную лицензию или аппаратную лицензию из локального ключа HASP
        или из сетевого ключа HASP, то производится попытка получения клиентской лицензии через сервер 1С:Предприятия.
        "N" — не получать клиентскую лицензию через сервер "1С:Предприятия".
        Значение по умолчанию — "N".

        Zn — установка разделителей.

        ZN=<Общий реквизит 1>,<Общий реквизит 2>,...,<Общий реквизит N>

        <Общий реквизит> = [<+>|<->]<значение общего реквизита>

        [<+>|<->] - признак использования: "+" (по умолчанию) - реквизит используется; "-" - не используется;

        Если разделитель не используется, то перед значением должен быть "-".
        Если первым символом в значении разделителя содержится символ "+" или "-", то при указании его нужно удваивать.

        <значение общего реквизита> - значение общего реквизита. Если в значении разделителя присутствует запятая,
        то при указании ее нужно удваивать. Если значение разделителя пропущено,
        но разделитель должен использоваться, то используется символ "+".

        Разделители разделяются запятой.

        Например:

        "Zn=-ПервыйРазделитель,+,---ТретийРазделитель", что означает:

        Первый разделитель выключен, значение – "ПервыйРазделитель",

        Второй разделитель включен, значение – пустая строка,

        Третий разделитель выключен, значение – "-ТретийРазделитель".

        prmod — запуск в режиме привилегированного сеанса. Разрешен аутентифицированному пользователю,
        имеющему административные права. Журнал регистрации фиксирует установку или отказ в возможности
        установки режима привилегированного сеанса. prmod=1 - привилегированный сеанс устанавливается.

        :param connection_string: Строка соединения, используемая 1С:Предприятием для соединения с информационной базой.
        :return: Внешнее соединение.
        """
        return self._iv8obj.Connect(connection_string)

    def connect_agent(self, identity: str) -> 'ServerAgentConnection':
        """
        Выполняет подсоединение к агенту сервера 1С:Предприятия 8, работающему на указанном серверном компьютере.
        Если подсоединение невозможно, то вызывается исключение.
        :param identity: Идентификатор протокола (по умолчанию tcp), имя компьютера или IP-адрес агента сервера (обязательно),
        номер IP-порта агента сервера (по умолчанию 1540).
        Например, значением параметра могут быть следующие строки:
        «server1», «tcp://server1», «tcp://server1:1540», «server1:1540»
        :return: Соединение с агентом сервера
        """
        return ServerAgentConnection(self._iv8obj.ConnectAgent(identity))

    def connect_working_process(self, identity: str) -> 'WorkingProcessConnection':
        """
        Создает административное соединение с рабочим процессом кластера серверов 1С:Предприятия 8.
        :param identity: Имя или IP-адрес рабочего процесса, с которым должно быть установлено соединение,
        в формате: <протокол>://<адрес_или_имя>:<порт>
        Например:
        testcomp
        tcp://testcomp
        tcp://testcomp:2354
        tcp://43.73.34.11:5342.
        :return: Соединение с рабочим процессом
        """
        return WorkingProcessConnection(self._iv8obj.ConnectWorkingProcess(identity))


class ServerAgentConnection(COMObjectWrapper):
    """
    Соединение с агентом сервера. С его помощью можно управлять кластерами.
    Представляет собой объект с интерфейсом IV8AgentConnection.
    """
    def __init__(self, iv8_agent_connection):
        super().__init__(iv8_agent_connection)

    @property
    def connection_string(self) -> str:
        return self._iv8obj.ConnectionString

    def authenticate(self, cluster: 'Cluster', login: str, password: str):
        """
        Выполняет аутентификацию администратора кластера серверов.
        Все методы данного объекта, для которых необходима аутентификация администратора кластера серверов,
        могут быть выполнены только после успешного выполнения этого метода
        :param cluster: Кластер серверов. Может быть получен при помощи методов
        GetServerWorkingProcesses или CreateWorkingProcessInfo
        :param login: Имя администратора кластера серверов. Пустая строка означает,
        что необходимо выполнить аутентификацию администратора по умолчанию
        (если в кластере не зарегистрирован ни один администратор) или
        аутентификацию пользователем операционной системы
        (если администратору кластера разрешена аутентификация пользователем операционной системы)
        :param password: Пароль пользователя для аутентификации пользователя паролем.
        Пользователь будет аутентифицирован, если совпадает его имя и пароль,
        и пользователю разрешена аутентификация паролем.
        """
        self._iv8obj.Authenticate(cluster.get_underlying_com_object(), login, password)

    def authenticate_agent(self, login: str, password: str):
        """
        Выполняет аутентификацию администратора центрального сервера.
        :param login: Имя администратора центрального сервера.
        :param password: Пароль администратора центрального сервера.
        :return:
        """
        self._iv8obj.AuthenticateAgent(login, password)

    def create_cluster_info(self) -> 'Cluster':
        """
        Создает новый кластер. Все его свойства содержат пустые строки, кроме свойства MainPort,
        которое устанавливается в значение по умолчанию (1541).
        Новый кластер может быть использован, например, для регистрации кластера.
        Для этого ему должны быть явно заданы необходимые значения свойств.
        """
        return Cluster(self._iv8obj.CreateClusterInfo())

    def get_agent_admins(self) -> List['RegUser']:
        """
        Получает массив администраторов центрального сервера. Для успешного выполнения метода необходима аутентификация
        одного из администраторов центрального сервера. Если не зарегистрирован ни один администратор центрального
        сервера, то перед выполнением этого метода следует выполнить метод AuthenticateAgent("", "").
        """
        return [RegUser(usr) for usr in self._iv8obj.GetAgentAdmins()]

    def get_clusters(self) -> List['Cluster']:
        """
        Позволяет получить список кластеров, зарегистрированных на центральном сервере.
        :return: Массив объектов Кластер серверов
        """
        return [Cluster(c) for c in self._iv8obj.GetClusters()]

    def get_infobases(self, cluster: 'Cluster') -> List['InfobaseShort']:
        """
        Получает массив информационных баз, зарегистрированных в кластере.
        Для успешного выполнения метода необходима аутентификация одного из администраторов кластера.
        Про каждую информационную базу выдается только такая информация,
        для получения которой не требуется аутентификация пользователя информационной базы.
        Получение всех параметров зарегистрированных информационных баз,
        а так же создание и удаление информационных баз может быть выполнено только посредством
        интерфейса Соединение с рабочим процессом после аутентификации пользователей.
        :param cluster: Кластер серверов, для которого необходимо получить список информационных баз.
        Может быть элементом полученного методом GetClusters массива кластеров,
        зарегистрированных в текущем центральном сервере.
        Еще кластер может быть создан методом CreateClusterInfo с последующим заполнением его свойств.
        :return: Массив кратких описаний информационных баз.
        """
        return [InfobaseShort(ib) for ib in self._iv8obj.GetInfoBases(cluster.get_underlying_com_object())]

    def get_infobase_sessions(self, cluster: 'Cluster', infobase: 'InfobaseShort') -> List['Session']:
        """
        Получить список сеансов информационной базы.
        :param cluster: Кластер серверов, для которого необходимо получить список сеансов.
        :param infobase: Информационная база, для которой необходимо получить список сеансов.
        :return: Массив, содержащий объекты Сеанс.
        """
        return [Session(s) for s in self._iv8obj.GetInfoBaseSessions(
            cluster.get_underlying_com_object(), infobase.get_underlying_com_object())]

    def get_sessions(self, cluster: 'Cluster') -> List['Session']:
        """
        Получает список сеансов, работающих с данным кластером.
        :param cluster: Кластер, для которого необходимо получить список сеансов.
        :return: Массив, который содержит список объектов Сеанс.
        """
        return [Session(s) for s in self._iv8obj.GetSessions(cluster.get_underlying_com_object())]

    def get_working_processes(self, cluster: 'Cluster') -> List['WorkingProcess']:
        """
        Позволяет получить массив рабочих процессов, зарегистрированных в заданном кластере.
        Для успешного выполнения метода необходима аутентификация одного из администраторов кластера.
        :param cluster: Кластер серверов, для которого должен быть получен массив рабочих процессов.
        :return: Массив рабочих процессов. Каждый рабочий процесс является объектом с интерфейсом Рабочий процесс
        """
        return [WorkingProcess(w) for w in self._iv8obj.GetWorkingProcesses(cluster.get_underlying_com_object())]

    def reg_cluster(self, cluster: 'Cluster'):
        """
        Позволяет зарегистрировать существующий кластер или создать новый кластер и зарегистрировать его.
        :param cluster: Описание кластера. Этот объект должен быть предварительно создан методом CreateClusterInfo
        и должны быть установлены правильные значения его свойств. Объект, являющийся элементом
        массива зарегистрированных кластеров, также может быть использован для создания нового кластера после изменения
        значений соответствующих свойств.
        """
        self._iv8obj.RegCluster(cluster.get_underlying_com_object())

    def set_cluster_recycling_by_memory(self, cluster: 'Cluster', max_memory_size: int, max_memory_time_limit: int):
        """
        Устанавливает автоматический перезапуск рабочих процессов по объему памяти.
        Если объем занятого рабочим процессом виртуального адресного пространства превышает критический объем памяти
        постоянно на протяжении максимально допустимого времени, то рабочий процесс будет автоматически перезапущен.
        :param cluster: Кластер, для которого требуется изменить настройку автоматического перезапуска
        рабочих процессов. Должен быть получен методом GetClusters.
        :param max_memory_size: Критический объем виртуальной памяти рабочего процесса в килобайтах.
        0 - критический объем памяти не задан и автоматический перезапуск рабочих процессов не производится.
        :param max_memory_time_limit: Максимально допустимое время превышения рабочим процессом критического
        объема виртуальной памяти, в секундах.
        0 - время не ограничено и автоматический перезапуск рабочих процессов не производится.
        """
        self._iv8obj.SetClusterRecyclingByMemory(
            cluster.get_underlying_com_object(), max_memory_size, max_memory_time_limit
        )

    def set_cluster_recycling_by_time(self, cluster: 'Cluster', lifetime_limit: int):
        """
        Устанавливает периодический перезапуск рабочих процессов. Если после запуска рабочего процесса прошло время,
        превышающее значение, указанное в параметре <ПериодПерезапуска>,
        то рабочий процесс будет автоматически перезапущен.
        :param cluster: Кластер, для которого требуется изменить настройку автоматического перезапуска
        рабочих процессов. Должен быть получен методом GetClusters.
        :param lifetime_limit: Период перезапуска рабочих процессов в секундах.
        0 - периодический перезапуск не выполняется.
        """
        self._iv8obj.SetClusterRecyclingByTime(cluster.get_underlying_com_object(), lifetime_limit)

    def set_cluster_recycling_errors_count_threshold(self, cluster: 'Cluster', errors_count_threshold: int):
        """
        Устанавливает допустимое отклонение количества ошибок сервера на один запрос
        в минуту от среднего значения по всем процессам.
        :param cluster:
        :param errors_count_threshold: Устанавливаемое допустимое отклонение количества ошибок сервера за один
        запрос в минуту. Задается в процентном отношении от среднего значения по остальным процессам.
        Например, если значение параметра установлено "50", а среднее количество ошибок
        на запрос в минуту за последние 5 минут - "100", то порог считается преодоленным для процессов,
        которые вызвали более 150 ошибок на запрос в минуту.
        """
        self._iv8obj.SetClusterRecyclingErrorsCountThreshold(
            cluster.get_underlying_com_object(), errors_count_threshold
        )

    def set_cluster_recycling_expiration_timeout(self, cluster: 'Cluster', expiration_timeout: int):
        """
        Устанавливает время принудительного завершения. Если запущенный рабочий процесс выключен, то он будет завершен
        после того, как через него не будет установлено ни одного соединения с информационными базами.
        Однако после того, как со времени выключения процесса пройдет <ТаймаутЗавершения> секунд, рабочий процесс
        будет завершен принудительно, даже если соединения остались.
        :param cluster:
        :param expiration_timeout: Время принудительного завершения рабочих процессов.
        0 - принудительное завершение рабочих процессов не выполняется.
        """
        self._iv8obj.SetClusterRecyclingExpirationTimeout(
            cluster.get_underlying_com_object(), expiration_timeout
        )

    def set_cluster_recycling_kill_problem_processes(self, cluster: 'Cluster', kill_problem_processes: bool):
        """
        Устанавливает принудительное завершение для проблемных процессов.
        :param cluster:
        :param kill_problem_processes: Если установлено значение Истина, то процессы,
        признанные проблемными по результатам мониторинга, будут принудительно завершены.
        Возможные причины признания процесса проблемным:
        - превышение значения <ДопустимоеОтклонениеКоличестваОшибокСервера>,
        - превышение количества памяти, занимаемой процессом,
        - зависание процесса (перестает отвечать на запросы),
        - процесс не был завершен через некоторое время после исключения из кластера.
        """
        self._iv8obj.SetClusterRecyclingKillProblemProcesses(
            cluster.get_underlying_com_object(), kill_problem_processes
        )

    def set_cluster_security_level(self, cluster: 'Cluster', security_level: int):
        """
        Изменить уровень безопасности кластера. Он определяет защищенность соединений процесса менеджера кластера.
        :param cluster:
        :param security_level: Уровень безопасности всех соединений процесса менеджера кластера (rmngr).
        0 - незащищенное соединение,
        1 - безопасное соединение только на время выполнения аутентификации пользователя,
        2 - безопасное соединение в течении всего сеанса.
        """
        self._iv8obj.SetClusterSecurityLevel(
            cluster.get_underlying_com_object(), security_level
        )

    def terminate_session(self, cluster: 'Cluster', session: 'Session', message: str = ''):
        """
        Удаляет сеанс. Попытка обращения к кластеру серверов от имени удаленного сеанса вызывает исключение.
        :param cluster: Кластер, из которого должен быть удален сеанс.
        :param session: Сеанс, который должен быть удален.
        :param message: Сообщение для пользователя, которое содержит причину прерывания текущего серверного вызова.
        Значение по умолчанию: "Выполнение текущей операции прервано администратором".
        """
        self._iv8obj.TerminateSession(cluster.get_underlying_com_object(), session.get_underlying_com_object(), message)

    def unreg_cluster(self, cluster: 'Cluster'):
        """
        Выполняет отмену регистрации кластера. Для успешного выполнения метода необходима аутентификация одного из
        пользователей кластера. Возможна отмена регистрации только пустого кластера.
        :param cluster: Кластер серверов, регистрацию которого необходимо отменить. Этот объект должен быть получен
        из элемента массива зарегистрированных кластеров, полученного методом GetClusters,
        или создан методом CreateClusterInfo с последующим заполнением свойств.
        """
        self._iv8obj.UnregCluster(cluster.get_underlying_com_object())


class Cluster(COMObjectWrapper):
    """
    Объект с интерфейсом IClusterInfo. Содержит параметры кластера серверов 1С:Предприятия.
    Может быть получен методами GetClusters или CreateClusterInfo
    """
    def __init__(self, iv8_cluster):
        super().__init__(iv8_cluster)

    @property
    def cluster_name(self) -> str:
        """
        Содержит удобочитаемое имя кластера серверов 1С:Предприятия
        Если при регистрации уже существующего реестра имя не указано или указано отличное от того,
        которое содержится в реестре, то после выполнения метода RegCluster значение свойства будет обновлено.

        Использование: Чтение и запись.
        """
        return self._iv8obj.ClusterName

    @cluster_name.setter
    def cluster_name(self, arg: str):
        self._iv8obj.ClusterName = arg

    @property
    def errors_count_threshold(self) -> int:
        """
        Допустимое отклонение количества ошибок сервера.
        Свойство указывает, какое отклонение количества ошибок (в %) от среднего показателя
        по рабочим процессам данного кластера серверов за последние 5 минут является подозрительным
        и может свидетельствовать о наличии проблем. При наличии отклонения процесс признается проблемным.
        Если значение равно 0, то проверка отклонения количества ошибок не выполняется.

        Использование: Чтение и запись.
        """
        return self._iv8obj.ErrorsCountThreshold

    @errors_count_threshold.setter
    def errors_count_threshold(self, arg: int):
        self._iv8obj.ErrorsCountThreshold = arg

    @property
    def expiration_timeout(self) -> int:
        """
        Время принудительного завершения.
        Интервал времени (в секундах), по истечении которого выключенный процесс будет завершен принудительно даже,
        если еще имеются установленные с ним соединения.
        Если процесс выключен автоматически по достижении времени перезапуска,
        то после принудительного завершения процесс будет удален из кластера.
        Если значение равно 0, то принудительное завершение не производится.

        Использование: Чтение и запись.
        """
        return self._iv8obj.ExpirationTimeout

    @expiration_timeout.setter
    def expiration_timeout(self, arg: int):
        self._iv8obj.ExpirationTimeout = arg

    @property
    def hostname(self) -> str:
        """
        Имя (символический или IP-адрес) компьютера,
        на котором расположен реестр кластера и процесс главного менеджера кластера.

        Использование: Чтение и запись.
        """
        return self._iv8obj.HostName

    @hostname.setter
    def hostname(self, arg: str):
        self._iv8obj.HostName = arg

    @property
    def kill_problem_processes(self) -> bool:
        """
        Режим принудительного завершения проблемных процессов.
        Если система мониторинга кластера признает менеджер кластера или рабочий процесс проблемным,
        то в технологическом журнале выводится событие ATTN. Если данное свойство имеет значение Истина,
        то проблемный процесс принудительно завершается средствами операционной системы с записью дампа.

        Использование: Только чтение
        """
        return self._iv8obj.KillProblemProcesses

    @property
    def lifetime_limit(self) -> int:
        """
        Период перезапуска рабочих процессов кластера.
        Интервал времени (в секундах), по истечении которого будет выполнен перезапуск рабочих процессов кластера.
        Если рабочий процесс активен в течение этого времени, то будет выполнен запуск нового процесса,
        а старый процесс будет выключен. Выключенный процесс будет обслуживать соединения,
        установленные ранее, не устанавливая при том новых соединений.
        Если значение равно 0, то перезапуск рабочих процессов не производится.

        Использование: Чтение и запись.
        """
        return self._iv8obj.LifeTimeLimit

    @lifetime_limit.setter
    def lifetime_limit(self, arg: int):
        self._iv8obj.LifeTimeLimit = arg

    @property
    def load_balancing_mode(self) -> int:
        """
        Режим выбора рабочего процесса для соединения.
        0 - приоритет выбора по доступной производительности;
        1 - приоритет выбора по доступной памяти;
        Значение по умолчанию 0.

        Использование: Только чтение
        """
        return self._iv8obj.LoadBalancingMode

    @property
    def main_port(self) -> int:
        """
        Содержит номер основного IP-порта менеджера кластера.

        Использование: Чтение и запись.
        """
        return self._iv8obj.MainPort

    @main_port.setter
    def main_port(self, arg: int):
        self._iv8obj.MainPort = arg

    @property
    def max_memory_size(self) -> int:
        """
        Определяет объем виртуального адресного пространства (в килобайтах),
        занятого рабочим процессом, превышение которого приведет к перезапуску рабочего процесса.
        Если значение равно 0, то объем занятого процессом виртуального адресного пространства не ограничен.

        Использование: Чтение и запись.
        """
        return self._iv8obj.MaxMemorySize

    @max_memory_size.setter
    def max_memory_size(self, arg: int):
        self._iv8obj.MaxMemorySize = arg

    @property
    def max_memory_time_limit(self) -> int:
        """
        Определяет максимальный период превышения критического объема памяти в секундах.
        Рабочий процесс будет перезапущен, если объем виртуального адресного пространства
        рабочего процесса постоянно превышает критический объем памяти в течение указанных в свойстве секунд.

        Использование: Чтение и запись.
        """
        return self._iv8obj.MaxMemoryTimeLimit

    @max_memory_time_limit.setter
    def max_memory_time_limit(self, arg: int):
        self._iv8obj.MaxMemoryTimeLimit = arg

    @property
    def security_level(self) -> int:
        """
        Определяет уровень безопасности соединений менеджера кластера.
        0 - незащищенное соединение,
        1 - защищенное соединение только в процессе аутентификации администратора,
        2 - защищенное соединение в течение всего сеанса.

        Использование: Чтение и запись.
        """
        return self._iv8obj.SecurityLevel

    @security_level.setter
    def security_level(self, arg: int):
        self._iv8obj.SecurityLevel = arg

    @property
    def session_fault_tolerance_level(self) -> int:
        """
        Определяет уровень отказоустойчивости кластера: количество рабочих серверов кластера,
        выход из строя которых не приводит к аварийному завершению сеансов.

        Использование: Чтение и запись.
        """
        return self._iv8obj.SessionFaultToleranceLevel

    @session_fault_tolerance_level.setter
    def session_fault_tolerance_level(self, arg: int):
        self._iv8obj.SessionFaultToleranceLevel = arg


class WorkingProcess(COMObjectWrapper):
    """
    Представляет собой объект с интерфейсом ISrvrProcessInfo. Содержит параметры рабочего процесса.
    Может быть получен методами GetWorkingProcesses или CreateWorkingProcessInfo.
    """
    def __init__(self, iv8_working_process):
        super().__init__(iv8_working_process)

    @property
    def available_performance(self) -> int:
        """
        Средняя за последние 5 минут доступная производительность.
        Определяется по времени реакции рабочего процесса на эталонный запрос.
        В соответствии с доступной производительностью кластер серверов принимает решение
        о распределении клиентов между рабочими процессами.
        """
        return self._iv8obj.AvailablePerfomance

    @property
    def avg_call_time(self) -> float:
        """
        Показывает среднее время обслуживания рабочим процессом одного клиентского обращения.
        Оно складывается из: значений свойств AvgServerCallTime, AvgDBCallTime, AvgLockCallTime, AvgBackCallTime.
        """
        return self._iv8obj.AvgCallTime

    @property
    def avg_db_call_time(self) -> float:
        """
        Показывает среднее время, затрачиваемое рабочим процессом на обращения к серверу баз данных
        при выполнении одного клиентского обращения.
        """
        return self._iv8obj.AvgDBCallTime

    @property
    def avg_lock_call_time(self) -> float:
        """
        Показывает среднее время обращения к менеджеру блокировок.
        """
        return self._iv8obj.AvgLockCallTime

    @property
    def avg_server_call_time(self) -> float:
        """
        Показывает среднее время, затрачиваемое самим рабочим процессом на выполнение одного клиентского обращения.
        """
        return self._iv8obj.AvgServerCallTime

    @property
    def avg_threads(self) -> float:
        """
        Показывает среднее количество клиентских потоков, исполняемых рабочим процессом кластера.
        """
        return self._iv8obj.AvgThreads

    @property
    def capacity(self) -> int:
        """
        Относительная производительность процесса. Может находиться в диапазоне от 1 до 1000.
        Используется в процессе выбора рабочего процесса, к которому будет подсоединен очередной клиент.
        Клиенты распределяются между рабочими процессами пропорционально производительности рабочих процессов.
        """
        return self._iv8obj.Capacity

    @property
    def connections(self) -> int:
        """
        Количество соединений рабочего процесса с пользовательскими приложениями.
        """
        return self._iv8obj.Connections

    @property
    def hostname(self) -> str:
        """
        Содержит имя или IP-адрес компьютера, на котором должен быть запущен рабочий процесс.
        """
        return self._iv8obj.HostName

    @property
    def is_enable(self) -> bool:
        """
        Устанавливается кластером при необходимости запустить или остановить рабочий процесс.
        Истина - процесс должен быть запущен и будет запущен при возможности.
        Ложь - процесс должен быть остановлен и будет остановлен после отсоединения всех пользователей
        или после истечения времени, заданного свойством ExpirationTimeout объекта Кластер серверов.
        """
        return self._iv8obj.IsEnable

    @property
    def license(self) -> 'License':
        """
        Содержит информацию о серверной лицензии, используемой рабочим процессом.
        Неопределено - рабочий процесс не использует серверную лицензию.
        """
        return self._iv8obj.License

    @property
    def main_port(self) -> int:
        """
        Содержит номер основного IP-порта рабочего процесса. Этот порт выделяется динамически
        при старте рабочего процесса из диапазонов портов, определенных для соответствующего рабочего сервера.
        """
        return self._iv8obj.MainPort

    @property
    def memory_excess_time(self) -> int:
        """
        Содержит время, в течение которого объем виртуальной памяти рабочего процесса превышает критическое значение,
        установленное для кластера, в секундах.
        """
        return self._iv8obj.MemoryExcessTime

    @property
    def memory_size(self) -> int:
        """
        Содержит объем виртуальной памяти, занимаемой рабочим процессом, в килобайтах.
        """
        return self._iv8obj.MemorySize

    @property
    def pid(self) -> int:
        """
        Идентификатор активного рабочего процесса в терминах операционной системы.
        """
        return self._iv8obj.PID

    @property
    def running(self) -> int:
        """
        Состояние рабочего процесса.
        0 – процесс неактивен (либо не загружен в память, либо не может выполнять клиентские запросы);
        1 – процесс активен (работает).
        """
        return self._iv8obj.Running

    @property
    def selection_size(self) -> int:
        """
        Количество вызовов, по которым посчитана статистика.
        """
        return self._iv8obj.SelectionSize

    def started_at(self) -> datetime:
        """
        Содержит момент запуска рабочего процесса. Если процесс не запущен, то содержит нулевую дату.
        """
        return self._iv8obj.StartedAt

    def use(self) -> int:
        """
        Определяет использование рабочего процесса кластером. Устанавливается администратором.
        Возможные значения:
        0 – не использовать, процесс не должен быть запущен;
        1 – использовать, процесс должен быть запущен;
        2 – использовать как резервный, процесс должен быть запущен только
        при невозможности запуска процесса со значением 1 этого свойства.
        """
        return self._iv8obj.User


class WorkingProcessConnection(COMObjectWrapper):
    """
    Позволяет выполнять административные функции над рабочим процессом кластера.
    Представляет собой объект с интерфейсом IV8ServerConnection.
    """
    def __init__(self, iv8_working_process_connection):
        super().__init__(iv8_working_process_connection)

    def add_authentication(self, login: str, password: str):
        """
        Выполняет аутентификацию.
        :param login: Имя администратора информационной базы.
        Административный доступ разрешен только к тем информационным базам,
        в которых зарегистрирован пользователь с таким именем и он имеет право "Администратор".
        :param password: Пароль администратора информационной базы.
        """
        self._iv8obj.AddAuthentication(login, password)

    def authenticate_admin(self, login: str, password: str):
        """
        Выполняет аутентификацию администратора кластера.
        Администратор кластера должен быть аутентифицирован для создания в этом кластере новой информационной базы.
        :param login: Имя администратора кластера.
        :param password: Пароль администратора кластера.
        """
        self._iv8obj.AuthenticateAdmin(login, password)

    def connect(self, infobase: 'Infobase', login: str, password: str):
        """
        Устанавливает соединение с информационной базой, зарегистрированной в кластере серверов 1С:Предприятия
        :param infobase: Информационная база, для которой должно быть установлено значение свойства Name.
        :param login: Имя пользователя информационной базы 1С:Предприятия, который устанавливает соединение.
        :param password: Пароль пользователя информационной базы. Если пароля нет, то нужно указать пустую строку.
        :return: Внешнее соединение.
        """
        return self._iv8obj.Connect(infobase.get_underlying_com_object(), login, password)

    def create_infobase(self, infobase: 'Infobase', create_db: bool = False):
        """
        Создает информационную базу с заданными параметрами. Требуется аутентификация администратора кластера.
        :param infobase: Информационная база. Все свойства, необходимые для создания информационной базы
        (Name, dbServerName, dbName, dbUser, dbPassword, Locale, [DateOffset]) должны быть заполнены.
        :param create_db: Флаг, определяющий, будет ли создана база данных в случае её отсутствия
        """
        # mode: Режим создания информационной базы:
        #         0 - при создании информационной базы базу данных не создавать;
        #         1 - при создании информационной базы создавать базу данных.
        mode = int(create_db)
        self._iv8obj.CreateInfoBase(infobase.get_underlying_com_object(), mode)

    def create_infobase_info(self) -> 'Infobase':
        """
        Создает объект описания одной информационной базы. Аутентификации не требуется.
        :return: Информационная база. Значения всех строковых свойств объекта равны пустым строкам, а числовых – нулям.
        Свойствам созданного объекта могут быть явно установлены значения.
        После этого объект можно использовать в качестве значений входных параметров соответствующих методов.
        """
        return Infobase(self._iv8obj.CreateInfoBaseInfo())

    def disconnect(self, connection: 'InfobaseConnection'):
        """
        Разрывает соединение клиента с рабочим процессом.
        После разрыва соединения соответствующее клиентское приложение завершится аварийно.
        :param connection: Описание соединения с информационной базой. Объект может быть получен ка элемент массива,
        возвращаемого методом GetInfoBaseConnections.
        """
        self._iv8obj.Disconnect(connection.get_underlying_com_object())

    def drop_infobase(self, infobase: 'Infobase', mode: int = 0):
        """
        Удаляет информационную базу. Для выполнения требуются административные права в удаляемой информационной базе.
        :param infobase: Информационная база, для которой должно быть установлено значение свойства Name.
        :param mode: Режим удаления информационной базы:
        0 - при удалении информационной базы базу данных не удалять;
        1 - при удалении информационной базы удалить базу данных;
        2 - при удалении информационной базы очистить базу данных.
        """
        self._iv8obj.DropInfoBase(infobase.get_underlying_com_object(), mode)

    def get_infobase_connections(self, infobase: 'Infobase') -> list:
        """
        Получает массив соединений информационной базы.
        Для выполнения требуются административные права на информационную базу.
        :param infobase: Информационная база, для которой должен быть получен список соединений.
        :return: Массив, содержащий объекты Соединение.
        """
        return [InfobaseConnection(ic) for ic
                in self._iv8obj.GetInfoBaseConnections(infobase.get_underlying_com_object())]

    def get_infobases(self) -> List['Infobase']:
        """
        Получает массив информационных баз, зарегистрированных в кластере серверов.
        Для выполнения не требуется аутентификации.
        При этом у информационной базы можно получить только значения свойств Name и Descr.
        :return: Массив, содержащий объекты Информационная база.
        """
        return [Infobase(ib) for ib in self._iv8obj.GetInfoBases()]

    def update_infobase(self, infobase: 'Infobase'):
        """
        Устанавливает новые параметры существующей информационной базы.
        :param infobase: Информационная база с новыми значениями параметров.
        Новые значения могут иметь только следующие свойства объекта:
        Descr,
        SessionsDenied,
        DBMS,
        dbServerName,
        dbName,
        dbUser,
        dbPassword,
        DeniedFrom,
        DeniedTo,
        DeniedMessage,
        DeniedParameter,
        ExternalSessionManagerConnectionString,
        ExternalSessionManagerRequired,
        LicenseDistributionAllowed,
        PermissionCode,
        SafeModeSecurityProfileName,
        ScheduledJobsDenied,
        SecurityProfileName
        """
        self._iv8obj.UpdateInfoBase(infobase.get_underlying_com_object())


class InfobaseShort(COMObjectWrapper):
    """
    Содержит параметры информационной базы 1С:Предприятия.
    Объект может быть построен программно. Для этого необходимо его создать методом CreateInfoBaseInfo
    и заполнить его свойства путем присваивания им новых значений.
    Уже заполненные объекты могут быть получены методом GetInfoBases.
    В последнем случае для чтения значений всех их свойств, кроме Name, необходимы административные права.
    Представляет собой объект с интерфейсом IInfoBaseInfo.
    """
    def __init__(self, iv8_infobase):
        super().__init__(iv8_infobase)

    @property
    def descr(self) -> str:
        """
        Содержит описание информационной базы.
        Служит для целей информирования пользователя о назначении данной информационной базы.

        Использование:
        Чтение и запись
        """
        return self._iv8obj.Descr

    @descr.setter
    def descr(self, arg: str):
        self._iv8obj.Descr = arg

    @property
    def name(self) -> str:
        """
        Имя информационной базы.

        Использование:
        Только чтение
        """
        return self._iv8obj.Name


class Infobase(InfobaseShort):
    """
    Содержит параметры информационной базы 1С:Предприятия.
    Объект может быть построен программно. Для этого необходимо его создать методом CreateInfoBaseInfo
    и заполнить его свойства путем присваивания им новых значений.
    Уже заполненные объекты могут быть получены методом GetInfoBases.
    В последнем случае для чтения значений всех их свойств, кроме Name, необходимы административные права.
    Представляет собой объект с интерфейсом IInfoBaseInfo.
    """
    __date_offset: Optional[int]
    __locale: Optional[str]

    def __init__(self, iv8_infobase):
        super().__init__(iv8_infobase)
        self.__date_offset = None
        self.__locale = None

    @property
    def date_offset(self) -> int:
        """
        Смещение дат в информационной базе (0 или 2000).

        Использование:
        Только запись.
        """
        return self.__date_offset

    @date_offset.setter
    def date_offset(self, arg: int):
        self.__date_offset = arg
        self._iv8obj.DateOffset = arg

    @property
    def dbms(self) -> str:
        """
        Определяет тип СУБД, в которой размещается информационная база. Возможны следующие типы СУБД:
        MSSQLServer - Microsoft SQL Server;
        PostgreSQL - PostgreSQL;
        IBMDB2 - IBM DB2;
        OracleDatabase - Oracle Database.

        Использование:
        Чтение и запись
        """
        return self._iv8obj.DBMS

    @dbms.setter
    def dbms(self, arg: str):
        self._iv8obj.DBMS = arg

    @property
    def db_name(self) -> str:
        """
        Имя базы данных сервера баз данных, в которой размещается информационная база.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.dbName

    @db_name.setter
    def db_name(self, arg: str):
        self._iv8obj.dbName = arg

    @property
    def db_password(self) -> str:
        """
        Пароль пользователя сервера баз данных.
        Если объект получен методом GetInfoBases, то результат чтения отличается от настоящего пароля пользователя.
        Пароль пользователя базы данных для зарегистрированной информационной базы прочитать нельзя.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.dbPassword

    @db_password.setter
    def db_password(self, arg: str):
        self._iv8obj.dbPassword = arg

    @property
    def db_server_name(self) -> str:
        """
        Имя сервера баз данных, в котором расположена информационная база.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.dbServerName

    @db_server_name.setter
    def db_server_name(self, arg: str):
        self._iv8obj.dbServerName = arg

    @property
    def db_user(self) -> str:
        """
        Имя пользователя сервера базы данных, от которого сервер 1С:Предприятия обращается к серверу базы данных.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.dbUser

    @db_user.setter
    def db_user(self, arg: str):
        self._iv8obj.dbUser = arg

    @property
    def denied_from(self) -> datetime:
        """
        Начало интервала времени, в течение которого действует режим блокировки сеансов.
        Если указана пустая дата ('00010101'), то без ограничения.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.DeniedFrom

    @denied_from.setter
    def denied_from(self, arg: datetime):
        self._iv8obj.DeniedFrom = arg

    @property
    def denied_message(self) -> str:
        """
        Сообщение, выдаваемое при попытке нарушения блокировки сеансов.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.DeniedMessage

    @denied_message.setter
    def denied_message(self, arg: str):
        self._iv8obj.DeniedMessage = arg

    @property
    def denied_parameter(self) -> str:
        """
        Параметр блокировки сеансов. Может содержать произвольную строку.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.DeniedParameter

    @denied_parameter.setter
    def denied_parameter(self, arg: str):
        self._iv8obj.DeniedParameter = arg

    @property
    def denied_to(self) -> datetime:
        """
        Конец интервала времени, в течение которого действует режим блокировки сеансов.
        Если указана пустая дата ('00010101'), то без ограничения.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.DeniedTo

    @denied_to.setter
    def denied_to(self, arg: datetime):
        self._iv8obj.DeniedTo = arg

    @property
    def external_session_manager_connection_string(self) -> str:
        """
        Внешнее управление сеансами.
        Значение: строка параметров веб сервиса внешнего управления сеансами в формате <имя параметра>=<значение>
        через символ ';' (точка с запятой).
        Если <значение> содержит пробелы или символы ';', то строку значения параметра следует заключать в кавычки (").
        При этом, каждый из символов кавычки ("), присутсивующий в строке <значение>,
        должен быть представлен двумя кавычками ("").
        Параметры:
        - wsdl – URL для получения wsdl веб сервиса;
        - ns – пространство имен веб сервиса;
        - srvc – имя веб сервиса;
        - port – имя порта веб сервиса.
        Например:
        wsdl=http://srvr/034983/ws/esc.1cws?wsdl;ns=http://www.sessioncontrol.org;srvc=ExtSessCont;port=ExtSessContSoap

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.ExternalSessionManagerConnectionString

    @external_session_manager_connection_string.setter
    def external_session_manager_connection_string(self, arg: str):
        self._iv8obj.ExternalSessionManagerConnectionString = arg

    @property
    def external_session_manager_required(self) -> bool:
        """
        Определяет обязательность использования внешнего управления сеансами.
        Истина - при недоступности сервиса внешнего управления сеансами пользователю, начинающему сеанс,
        выдается сообщение об ошибке и начало сеанса с информационной базой не выполняется.
        Иначе при недоступности сервиса внешнего управления сеансами платформа не препятствует началу сеанса.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.ExternalSessionManagerRequired

    @external_session_manager_required.setter
    def external_session_manager_required(self, arg: bool):
        self._iv8obj.ExternalSessionManagerRequired = arg

    @property
    def license_distribution_allowed(self) -> bool:
        """
        Разрешить выдачу лицензий сервером 1С:Предприятия.
        False - не разрешать,
        True - разрешить.
        Если при запуске клиентского приложения с клиент-серверной информационной базой клиентское приложение
        не получило аппаратную лицензию (от локального HASP или сетевого HASP) или программную лицензию
        (платформы или базовой конфигурации), то оно предпринимает попытку получить лицензию с сервера 1С:Предприятия.
        Сервер 1С:Предприятия может выдать лицензию только, если разрешена выдача лицензий сервером 1С:Предприятия.

        Использование:
        Чтение и запись.
        """
        return bool(self._iv8obj.LicenseDistributionAllowed)

    @license_distribution_allowed.setter
    def license_distribution_allowed(self, arg: bool):
        self._iv8obj.LicenseDistributionAllowed = int(arg)

    @property
    def locale(self) -> str:
        """
        Идентификатор национальных настроек информационной базы, например, ru_RU для России.

        Использование:
        Только запись.
        """
        return self.__locale

    @locale.setter
    def locale(self, arg: str):
        self.__locale = arg
        self._iv8obj.Locale = arg

    @property
    def name(self) -> str:
        """
        Имя информационной базы

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.Name

    @name.setter
    def name(self, arg: str):
        self._iv8obj.Name = arg

    @property
    def permission_code(self) -> str:
        """
        Код разрешения, разрешающий начало сеанса вопреки блокировке сеансов. Этот код должен быть задан в параметре
        /UC командной строки запуска клиентского приложения или в параметре UC строки соединения объектов
        V83.COMConnector или V83.Application,
        чтобы начать сеанс с информационной базой во время действия блокировки сеансов.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.PermissionCode

    @permission_code.setter
    def permission_code(self, arg: str):
        self._iv8obj.PermissionCode = arg

    @property
    def safe_mode_security_profile_name(self) -> str:
        """
        Содержит профиль безопасности исполнения кода, внешнего по отношению к конфигурации.
        Если ссылка не указана, то в безопасном режиме исполнения кода информационная база работает с полным запретом
        на внешнюю активность. Если указано имя профиля безопасности, то поведение информационной базы
        в безопасном режиме исполнения кода регламентируется этим профилем.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.SafeModeSecurityProfileName

    @safe_mode_security_profile_name.setter
    def safe_mode_security_profile_name(self, arg: str):
        self._iv8obj.SafeModeSecurityProfileName = arg

    @property
    def scheduled_jobs_denied(self) -> bool:
        """
        Признак блокировки выполнения регламентных заданий информационной базы.
        Истина - выполнение регламентных заданий блокировано.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.ScheduledJobsDenied

    @scheduled_jobs_denied.setter
    def scheduled_jobs_denied(self, arg: bool):
        self._iv8obj.ScheduledJobsDenied = arg

    @property
    def security_level(self) -> int:
        """
        Уровень безопасности информационной базы.
        Определяет защищенность соединений рабочего процесса с клиентами, использующими данную информационную базу.
        0 - незащищенное,
        1 - защищенное только на время установки соединения и аутентификации пользователя информационной базы,
        2 - защищенное в течение всего сеанса.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.SecurityLevel

    @security_level.setter
    def security_level(self, arg: int):
        self._iv8obj.SecurityLevel = arg

    @property
    def security_profile_name(self) -> str:
        """
        Содержит имя профиля безопасности информационной базы. Если ссылка не указана, то информационная база
        имеет полные права на внешнюю активность. Если указано имя профиля безопасности,
        то поведение информационной базы регламентируется этим профилем.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.SecurityProfileName

    @security_profile_name.setter
    def security_profile_name(self, arg: str):
        self._iv8obj.SecurityProfileName = arg

    @property
    def sessions_denied(self) -> bool:
        """
        Управляет режимом блокировки сеансов.
        Истина и текущее время находится в диапазоне, определяемом свойствами DeniedFrom и DeniedTo,
        то начало новых сеансов с информационной базой запрещено. Если при этом попытаться установить новый сеанс,
        то будет выдано сообщение об ошибке, содержащее текст из значения свойства DeniedMessage.
        Для начала сеанса вопреки блокировке сеансов необходимо указать код разрешения,
        определяемый свойством PermissionCode.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.SessionsDenied

    @sessions_denied.setter
    def sessions_denied(self, arg: bool):
        self._iv8obj.SessionsDenied = arg


class InfobaseConnection(COMObjectWrapper):
    """
    Содержит параметры одного соединения клиентского приложения
    с информационной базой на кластере серверов 1С:Предприятия.
    Представляет собой объект с интерфейсом IInfoBaseConnectionInfo.
    """
    def __init__(self, iv8_infobase_connection):
        super().__init__(iv8_infobase_connection)

    @property
    def app_id(self) -> str:
        """
        Идентификатор приложения, установившего соединение.
        """
        return self._iv8obj.AppID

    @property
    def blocked_by_dbms(self) -> int:
        """
        Идентификатор cоединения, блокирующего работу данного соединения (в СУБД).
        """
        return self._iv8obj.blockedByDBMS

    @property
    def bytes_all(self) -> int:
        """
        Объем данных, полученный и отправленный соединением.
        """
        return self._iv8obj.bytesAll

    @property
    def bytes_last_5min(self) -> int:
        """
        Объем данных, полученных и отправленных соединением за последние 5 минут.
        """
        return self._iv8obj.bytesLast5Min

    @property
    def calls_all(self) -> int:
        """
        Количество серверных вызовов соединения.
        """
        return self._iv8obj.callsAll

    @property
    def calls_last_5min(self) -> int:
        """
        Количество серверных вызовов соединения за последние 5 минут.
        """
        return self._iv8obj.callsLast5Min

    @property
    def connected_at(self) -> datetime:
        """
        Содержит время установки соединения.
        """
        return self._iv8obj.ConnectedAt

    @property
    def conn_id(self) -> int:
        """
        Содержит номер соединения. Имеет смысл, если с данного компьютера установлено несколько соединений.
        """
        return self._iv8obj.ConnID

    @property
    def current_service_name(self) -> str:
        """
        Идентификатор сервиса кластера, который вызывается в данный момент, или пустая строка,
        если вызов сервиса кластера не выполняется.
        """
        return self._iv8obj.CurrentServiceName

    @property
    def db_conn_mode(self) -> int:
        """
        Режим соединения с базой данных (0 – соединения нет, 1 – разделяемое, 2 – монопольное).
        """
        return self._iv8obj.dbConnMode

    @property
    def dbms_bytes_all(self) -> int:
        """
        Объем данных, переданных между сервером 1С:Предприятия и сервером баз данных,
        с момента установки данного соединения.
        """
        return self._iv8obj.dbmsBytesAll

    @property
    def dbms_bytes_last_5min(self) -> int:
        """
        Объем данных, переданных между сервером 1С:Предприятия и сервером баз данных, за последние 5 минут.
        """
        return self._iv8obj.dbmsBytesLast5Min

    @property
    def db_proc_info(self) -> str:
        """
        Если в момент получение списка соединений информационной базы методом GetInfoBaseConnections данное
        соединение выполняло обращение к серверу баз данных, то свойство содержит идентификатор процесса
        соединения с СУБД, выполняющего это обращение. Идентификатор выдается в терминах самой СУБД.
        В противном случае – пустая строка.
        """
        return self._iv8obj.dbProcInfo

    @property
    def db_proc_took(self) -> int:
        """
        Если в момент получение списка соединений информационной базы методом GetInfoBaseConnections данное
        соединение выполняло обращение к серверу баз данных, то свойство содержит время в секундах,
        в течение которого выполняется данное обращение к серверу баз данных. В противном случае – 0.
        """
        return self._iv8obj.dbProcTook

    @property
    def db_proc_took_at(self) -> datetime:
        """
        Момент последнего захвата соединения с сервером баз данных.
        """
        return self._iv8obj.dbProcTookAt

    @property
    def duration_all(self) -> float:
        """
        Полное время серверных вызовов соединения.
        """
        return self._iv8obj.durationAll

    @property
    def duration_all_dbms(self) -> float:
        """
        Полное время серверных вызовов соединения СУБД.
        """
        return self._iv8obj.durationAllDBMS

    @property
    def duration_all_service(self) -> float:
        """
        Время в миллисекундах, которое затрачено соединением с информационной базой
        на вызовы сервисов кластера с момента установки соединения.
        """
        return self._iv8obj.durationAllService

    @property
    def duration_current(self) -> float:
        """
        Время текущего серверного вызова.
        """
        return self._iv8obj.durationCurrent

    @property
    def duration_current_dbms(self) -> float:
        """
        Время текущего вызова СУБД.
        """
        return self._iv8obj.durationCurrentDBMS

    @property
    def duration_current_service(self) -> float:
        """
        Время в миллисекундах, в течение которого соединение с информационной базой
        выполняет текущий вызов сервиса кластера.
        0, если в данный момент вызов сервиса кластера не выполняется.
        """
        return self._iv8obj.durationCurrentService

    @property
    def duration_last_5min(self) -> float:
        """
        Время серверных вызовов соединения за последние 5 минут.
        """
        return self._iv8obj.durationLast5Min

    @property
    def duration_last_5min_dbms(self) -> float:
        """
        Время серверных вызовов соединения СУБД за последние 5 минут.
        """
        return self._iv8obj.durationLast5MinDBMS

    @property
    def duration_last_5min_service(self) -> float:
        """
        Время в миллисекундах, которое затрачено соединением с информационной базой
        на вызовы сервисов кластера за последние 5 минут.
        """
        return self._iv8obj.durationLast5MinService

    @property
    def hostname(self) -> str:
        """
        Имя компьютера, с которого установлено соединение.
        """
        return self._iv8obj.HostName

    @property
    def ib_conn_mode(self) -> int:
        """
        Содержит режим соединения с информационной базой (0 – разделяемое, 1 – монопольное).
        """
        return self._iv8obj.IBConnMode

    @property
    def in_bytes_all(self) -> int:
        """
        Содержит количество данных в байтах, прочитанных с диска сеансом с момента начала сеанса.
        """
        return self._iv8obj.InBytesAll

    @property
    def in_bytes_current(self) -> int:
        """
        Содержит количество данных в байтах, прочитанных с диска с начала выполнения текущего вызова.
        """
        return self._iv8obj.InBytesCurrent

    @property
    def in_bytes_last_5min(self) -> int:
        """
        Содержит количество данных в байтах, прочитанных с диска сеансом за последние 5 минут.
        """
        return self._iv8obj.InBytesLast5Min

    @property
    def memory_all(self) -> int:
        """
        Содержит объем памяти в байтах, занятый в процессе вызовов с момента начала сеанса.
        """
        return self._iv8obj.MemoryAll

    @property
    def memory_current(self) -> int:
        """
        Содержит объем памяти в байтах, занятый с начала выполнения текущего вызова.
        Если в данный момент вызов не выполняется, содержит 0.
        """
        return self._iv8obj.MemoryCurrent

    @property
    def memory_last_5min(self) -> int:
        """
        Содержит объем памяти в байтах, занятый в процессе вызовов за последние 5 минут.
        """
        return self._iv8obj.MemoryLast5Min

    @property
    def out_bytes_all(self) -> int:
        """
        Содержит количество данных в байтах, записанных на диск сеансом с момента начала сеанса.
        """
        return self._iv8obj.OutBytesAll

    @property
    def out_bytes_current(self) -> int:
        """
        Содержит количество данных в байтах, записанных на диск с начала выполнения текущего вызова.
        """
        return self._iv8obj.OutBytesCurrent

    @property
    def out_bytes_last_5min(self) -> int:
        """
        Содержит количество данных в байтах, записанных на диск сеансом за последние 5 минут.
        """
        return self._iv8obj.OutBytesLast5Min

    @property
    def username(self) -> str:
        """
        Содержит имя пользователя 1С:Предприятия, подсоединенного к информационной базе.
        """
        return self._iv8obj.UserName


class Session(COMObjectWrapper):
    """
    Содержит данные об одном сеансе.
    """
    def __init__(self, iv8_session):
        super().__init__(iv8_session)

    @property
    def app_id(self) -> str:
        """
        Содержит идентификатор приложения, установившего сеанс.
        """
        return self._iv8obj.AppID

    @property
    def blocked_by_dbms(self) -> int:
        """
        Содержит номер сеанса, который является причиной ожидания транзакционной блокировки, в том случае,
        если сеанс исполняет запрос к СУБД и ожидает транзакционную блокировку, установленную другим сеансом. Иначе - 0.
        """
        return self._iv8obj.blockedByDBMS

    @property
    def blocked_by_ls(self) -> int:
        """
        Содержит номер сеанса, который является причиной ожидания управляемой транзакционной блокировки, в случае,
        если сеанс выполняет установку управляемых транзакционных блокировок и ожидает блокировки,
        установленные другим сеансом. Иначе - 0.
        """
        return self._iv8obj.blockedByLS

    @property
    def bytes_all(self) -> int:
        """
        Содержит объем данных, переданных между сервером 1С:Предприятия
        и клиентским приложением данного сеанса с момента начала сеанса, в байтах.
        """
        return self._iv8obj.bytesAll

    @property
    def bytes_last_5min(self) -> int:
        """
        Содержит объем данных, переданных между сервером 1С:Предприятия
        и клиентским приложением данного сеанса за последние 5 минут, в байтах.
        """
        return self._iv8obj.bytesLast5Min

    @property
    def calls_all(self) -> int:
        """
        Содержит количество вызовов сервера 1С:Предприятия от имени данного сеанса с момента начала сеанса.
        """
        return self._iv8obj.callsAll

    @property
    def calls_last_5min(self) -> int:
        """
        Содержит количество вызовов сервера 1С:Предприятия от имени данного сеанса за последние 5 минут.
        """
        return self._iv8obj.callsLast5Min

    @property
    def connection(self) -> 'ConnectionShort':
        """
        Содержит описание соединения, которому назначен сеанс. Иначе - Неопределено.
        """
        return ConnectionShort(self._iv8obj.Connection)

    @property
    def cpu_time_all(self) -> float:
        """
        Содержит время, которое затрачено процессором на обработку серверных вызовов с момента начала сеанса,
        в миллисекундах.
        """
        return self._iv8obj.cpuTimeAll

    @property
    def cpu_time_current(self) -> float:
        """
        Содержит время, затраченное процессором на обработку текущего серверного вызова, в миллисекундах.
        """
        return self._iv8obj.cpuTimeCurrent

    @property
    def cpu_time_last_5min(self) -> float:
        """
        Время, которое затрачено процессором на обработку серверных вызовов сеанса за последние 5 минут,
        в миллисекундах.
        """
        return self._iv8obj.cpuTimeLast5Min

    @property
    def current_service_name(self) -> str:
        """
        Идентификатор сервиса кластера, который вызывается в данный момент,
        или пустая строка, если вызов сервиса кластера не выполняется.
        """
        return self._iv8obj.CurrentServiceName

    @property
    def dbms_bytes_all(self) -> int:
        """
        Содержит количество данных, переданных и полученных от СУБД от имени данного сеанса
        с момента начала сеанса, в байтах.
        """
        return self._iv8obj.dbmsBytesAll

    @property
    def dbms_bytes_last_5min(self) -> int:
        """
        Содержит количество данных, переданных и полученных от СУБД от имени данного сеанса
        за последние 5 минут, в байтах.
        """
        return self._iv8obj.dbmsBytesLast5Min

    @property
    def db_proc_info(self) -> str:
        """
        Содержит номер соединения с СУБД в терминах СУБД в том случае, если в момент получения списка
        выполняется запрос к СУБД, открыта транзакция или определены временные таблицы
        (это означает, что захвачено соединение с СУБД).
        Пустая строка - соединение с СУБД не захвачено.
        """
        return self._iv8obj.dbProcInfo

    @property
    def db_proc_took(self) -> float:
        """
        Содержит время соединение с СУБД с момента захвата в миллисекундах.
        0 - соединение не захвачено.
        """
        return self._iv8obj.dbProcTook

    @property
    def db_proc_took_at(self) -> datetime:
        """
        Содержит момент времени, когда соединение с СУБД было захвачено данным сеансом последний раз.
        """
        return self._iv8obj.dbProcTookAt

    @property
    def duration_all(self) -> float:
        """
        Содержит время исполнения вызовов сервера 1С:Предприятия от имени данного сеанса с момента начала сеанса,
        в секундах.
        """
        return self._iv8obj.durationAll

    @property
    def duration_all_dbms(self) -> float:
        """
        Содержит суммарное время исполнения запросов к СУБД от имени данного сеанса с момента начала сеанса,
        в миллисекундах.
        """
        return self._iv8obj.durationAllDBMS

    @property
    def duration_all_service(self) -> float:
        """
        Время в миллисекундах, которое затрачено сеансом на вызовы сервисов кластера с момента начала сеанса.
        """
        return self._iv8obj.durationAllService

    @property
    def duration_current(self) -> float:
        """
        Содержит интервал времени в миллисекундах, прошедший с момента начала обращения, в случае,
        если сеанс выполняет обращение к серверу 1С:Предприятия. Иначе – 0.
        """
        return self._iv8obj.durationCurrent

    @property
    def duration_current_dbms(self) -> float:
        """
        Содержит интервал времени в миллисекундах, прошедший с момента начала выполнения запроса,
        в случае, если сеанс выполняет запрос к СУБД. Иначе – 0.
        """
        return self._iv8obj.durationCurrentDBMS

    @property
    def duration_current_service(self) -> float:
        """
        Содержит время, в течение которого сеанс выполняет текущий вызов сервиса кластера.
        0, если в данный момент вызов сервиса кластера не выполняется, в миллисекундах.
        """
        return self._iv8obj.durationCurrentService

    @property
    def duration_last_5min(self) -> float:
        """
        Содержит время исполнения вызовов сервера 1С:Предприятия от имени данного сеанса за последние 5 минут,
        в миллисекундах.
        """
        return self._iv8obj.durationLast5Min

    @property
    def duration_last_5min_dbms(self) -> float:
        """
        Содержит суммарное время исполнения запросов к СУБД от имени данного сеанса за последние 5 минут,
        в миллисекундах.
        """
        return self._iv8obj.durationLast5MinDBMS

    @property
    def duration_last_5min_service(self) -> float:
        """
        Содержит время, которое затрачено сеансом на вызовы сервисов кластера за последние 5 минут, в миллисекундах.
        """
        return self._iv8obj.durationLast5MinService

    @property
    def hibernate(self) -> bool:
        """
        Сеанс находится в спящем режиме.
        """
        return self._iv8obj.Hibernate

    @property
    def hibernate_session_terminate_time(self) -> int:
        """
        Интервал времени в секундах, по истечении которого спящий сеанс завершается.
        """
        return self._iv8obj.HibernateSessionTerminateTime

    @property
    def host(self) -> str:
        """
        Содержит имя или адрес компьютера, установившего сеанс.
        """
        return self._iv8obj.Host


class License(COMObjectWrapper):
    """
    Содержит данные об одной лицензии.
    """
    def __init__(self, iv8_license):
        super().__init__(iv8_license)

    @property
    def filename(self) -> str:
        """
        Содержит полное имя используемого файла программной лицензии.
        Только в случае использования программной лицензии платформы. Иначе содержит пустую строку.
        """
        return self._iv8obj.FileName

    @property
    def full_presentation(self) -> str:
        """
        Содержит локализованное строковое представление лицензии,
        как в свойстве "Лицензия" диалога свойств сеанса или свойств рабочего процесса консоли кластера.
        """
        return self._iv8obj.FullPresentation

    @property
    def issued_by_server(self) -> bool:
        """
        Истина - лицензия получена сервером 1С:Предприятия и выдана клиентскому приложению.
        Ложь - лицензия получена клиентским приложением.
        """
        return self._iv8obj.IssuedByServer

    @property
    def license_type(self) -> int:
        """
        Содержит тип лицензии:
        0 - программная лицензия платформы;
        1 - аппаратная лицензия (ключ защиты программы).
        """
        return self._iv8obj.LicenseType

    @property
    def max_users_all(self) -> int:
        """
        Содержит максимальное количество пользователей, допустимое для данного комплекта,
        если используется программная лицензия платформы. Иначе совпадает с значением свойства MaxUsersCur.
        """
        return self._iv8obj.MaxUsersAll

    @property
    def max_users_cur(self) -> int:
        """
        Содержит максимальное количество пользователей в используемом ключе защиты программы
        или в используемом файле программной лицензии.
        """
        return self._iv8obj.MaxUsersCur

    @property
    def net(self) -> bool:
        """
        Истина, если для аппаратной лицензии ключ защиты программы является сетевым,
        лицензия получена через менеджер лицензий Aladdin License Manager; Ложь в противном случае.
        """
        return self._iv8obj.Net

    @property
    def rmngr_address(self) -> str:
        """
        Содержит адрес сервера, на котором запущен процесс, получивший лицензию.
        Если лицензию получило клиентское приложение, то содержит пустую строку.
        """
        return self._iv8obj.RMngrAddress

    @property
    def rmngr_pid(self) -> str:
        """
        Содержит идентификатор процесса, получившего лицензию, присвоенный ему операционной системой.
        """
        return self._iv8obj.RMngrPID

    @property
    def rmngr_port(self) -> int:
        """
        Содержит номер IP-порта серверного процесса, получившего лицензию.
        0 - лицензию получило клиентское приложение.
        """
        return self._iv8obj.RMngrPort

    @property
    def series(self) -> int:
        """
        Содержит серию ключа защиты программы для аппаратной лицензии
        или регистрационный номер комплекта для программной лицензии платформы.
        """
        return self._iv8obj.Series

    @property
    def short_presentation(self) -> str:
        """
        Содержит локализованное строковое представление лицензии,
        как в колонке "Лицензия" списка сеансов или рабочих процессов.
        """
        return self._iv8obj.ShortPresentation


class ConnectionShort(COMObjectWrapper):
    """
    Описание соединения. Получение этой информации не требует аутентификации пользователей информационных баз.
    Представляет собой объект с интерфейсом IConnectionShort.
    """
    def __init__(self, iv8_connection):
        super().__init__(iv8_connection)

    @property
    def application(self) -> str:
        """
        Содержит имя приложения, установившего соединение с фермой серверов 1С:Предприятия.
        """
        return self._iv8obj.Application

    @property
    def blocked_by_ls(self) -> int:
        """
        Содержит идентификатор соединения, блокирующего работу данного соединения (в Сервисе транзакционных блокировок).
        """
        return self._iv8obj.blockedByLS

    @property
    def connected_at(self) -> datetime:
        """
        Содержит момент времени, когда соединение было установлено.
        """
        return self._iv8obj.ConnectedAt

    @property
    def conn_id(self) -> int:
        """
        Содержит идентификатор соединения. Позволяет различить разные соединения,
        установленные одним и тем же приложением с одного и того же клиентского компьютера.
        """
        return self._iv8obj.ConnID

    @property
    def host(self) -> str:
        """
        Содержит имя пользовательского компьютера, с которого установлено соединение.
        """
        return self._iv8obj.Host

    @property
    def infobase(self) -> 'InfobaseShort':
        """
        Содержит интерфейс объекта с кратким описанием информационной базы, к которой относится данное соединение.
        """
        return InfobaseShort(self._iv8obj.InfoBase)

    @property
    def process(self) -> 'WorkingProcess':
        """
        Содержит интерфейс объекта с описанием серверного процесса, с которым установлено данное соединение.
        """
        return WorkingProcess(self._iv8obj.Process)

    @property
    def session_id(self) -> int:
        """
        Содержит номер сеанса, если соединению назначен сеанс, иначе - 0.
        """
        return self._iv8obj.SessionID


class RegUser(COMObjectWrapper):
    """
    Содержит информацию об администраторе центрального сервера или кластера серверов.
    Используется для получения информации о администраторах методом GetClusterAdmins или для регистрации новых
    администраторов кластера методами CreateClusterAdminInfo и RegClusterAdmin.
    Представляет собой объект с интерфейсом IRegUserInfo.
    """
    def __init__(self, iv8_reg_user_info):
        super().__init__(iv8_reg_user_info)
        self.__password = None

    @property
    def descr(self) -> str:
        """
        Содержит описание администратора центрального сервера или кластера серверов.
        Предназначено для визуального отображения.

        Использование:
        Чтение и запись
        """
        return self._iv8obj.Descr

    @descr.setter
    def descr(self, arg: str):
        self._iv8obj.Descr = arg

    @property
    def name(self) -> str:
        """
        Имя администратора центрального сервера или кластера (кластеров) серверов. Для центрального сервера указываются
        администраторы, для каждого кластера также указываются свои администраторы. Имена администраторов,
        зарегистрированных на центральном сервере должны быть уникальными среди имен администраторов центрального
        сервера. Аналогичное замечание относится к именам администраторов кластера серверов. Имена администраторов
        центрального сервера могут совпадать с именами администраторов в кластере (кластерах) серверов. Также имена
        администраторов в одном кластере серверов могут совпадать с именами администраторов в другом кластере серверов.

        Использование:
        Чтение и запись
        """
        return self._iv8obj.Name

    @name.setter
    def name(self, arg: str):
        self._iv8obj.Name = arg

    @property
    def password(self) -> str:
        """
        Пароль пользователя для его аутентификации.

        Использование:
        Только запись
        """
        return self.__password

    @password.setter
    def password(self, arg: str):
        self.__password = arg
        self._iv8obj.Password = arg

    @property
    def password_auth_allowed(self) -> bool:
        """
        Содержит признак разрешения администратору аутентификации паролем.
        Истина - аутентификация паролем. В этом случае при правильном вводе пароля администратор будет считаться
        аутентифицированным.
        Ложь - запрещена.

        Использование:
        Чтение и запись
        """
        return self._iv8obj.PasswordAuthAllowed

    @password_auth_allowed.setter
    def password_auth_allowed(self, arg: bool):
        self._iv8obj.PasswordAuthAllowed = arg

    @property
    def sys_auth_allowed(self) -> bool:
        """
        Содержит признак разрешения администратору аутентификации пользователем операционной системы.
        Истина - аутентификация разрешена. Данный администратор будет считаться аутентифицированным, если клиентское
        приложение работает от имени пользователя операционной системы, имя которого указано в качестве значения
        свойства SysUserName. При этом необходимо, чтобы компьютеры, на которых работают агент сервера и клиентское
        приложение, использовали один и тот же сервер аутентификации (например, контроллер домена Windows).
        Ложь - запрещена.

        Использование:
        Чтение и запись
        """
        return self._iv8obj.SysAuthAllowed

    @sys_auth_allowed.setter
    def sys_auth_allowed(self, arg: bool):
        self._iv8obj.SysAuthAllowed = arg

    @property
    def sys_username(self) -> str:
        """
        Содержит имя пользователя операционной системы, которое соответствует данному администратору кластера серверов.
        Формат: \\\\<имя домена>\\<имя пользователя>. Например, \\\\domain\\username.

        Использование:
        Чтение и запись.
        """
        return self._iv8obj.SysUserName

    @sys_username.setter
    def sys_username(self, arg: str):
        self._iv8obj.SysUserName = arg
