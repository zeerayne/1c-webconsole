import pythoncom
import win32com.client

from typing import List

class COMConnector:

    def __init__(self):
        pythoncom.CoInitialize()
        # В зависимости от версии платформы используется V82.COMConnector или V83.COMConnector
        self.V8_COM_CONNECTOR = None
        try:
            self.V8_COM_CONNECTOR = win32com.client.Dispatch("V83.COMConnector")
        except pythoncom.com_error:
            self.V8_COM_CONNECTOR = win32com.client.Dispatch("V82.COMConnector")

    def connect(self, connection_string: str):
        """
        Создает соединение с информационной базой 1С:Предприятия 8.
        Устанавливает соединение с информационной базой 1С:Предприятия 8
        и возвращает ссылку на объект Внешнее соединение.
        Установка соединения выполняется по следующему алгоритму:
        1. Внешнее соединение с требуемыми параметрами ищется в пуле соединений. Если найдено, то используется оно.
        2. Если Внешнее соединение с требуемыми параметрами не найдено,
        то анализируется не исчерпан ли лимит по числу одновременно существующих соединений. Если не исчерпан,
        то создается новое Внешнее соединение.
        3. Если лимит исчерпан, но при этом в пуле имеются неиспользуемые Внешнее соединение, то соединение,
        дольше всех находящееся в пуле, удаляется и создается новое Внешнее соединение.
        4. Если никаким способом найти подходящее или создать новое Внешнее соединение не удалось,
        то происходит ожидание освобождения Внешнее соединение другим потоком,
        после чего весь процесс повторяется, начиная с пункта 1.

        Строка соединения— строка, задающая параметры информационной базы, каждый из которых представляет собой фрагмент вида <Имя параметра>=<Значение>, где:

        Имя параметра — имя параметра;
        Значение — его значение.

        Фрагменты отделяются друг от друга символами ';'.
        Если значение содержит пробельные символы, то оно должно быть заключено в двойные кавычки (").
        Набор параметров определяется вариантом создаваемой информационной - базы - файловый или клиент-серверный.

        Для файлового варианта определены параметры:

        File — имя каталога, в котором размещается файл информационной базы;
        Locale — язык (страна), который будет использован при открытии или создании информационной базы.
        Допустимые значения такие же как у параметра <Форматная строка> метода Формат().
        Параметр Locale задавать не обязательно.
        Если не задан, то будут использованы региональные установки текущей информационной базы;
        DBFormat — формат базы данных (Допустимые значения: 8.2.14, 8.3.8. Значение по умолчанию — 8.2.14);
        DBPageSize — размер страницы базы данных в байтах (Допустимые значения: 4096(или 4k) , 8192(или 8k),
        16384(или 16k), 32768(или 32k), 65536(или 64k), Значение по умолчанию —  4k).

        Для клиент-серверного варианта определены параметры:

        Srvr —  имя сервера «1С:Предприятия» в формате: [<протокол>://]<адрес>[:<порт>], где:

        <протокол> – не обязателен, поддерживается только протокол TCP,
        <адрес> – имя сервера или IP-адрес сервера в форматах IPv4 или IPv6,
        <порт> – не обязателен, порт главного менеджера кластера, по умолчанию равен 1541.
        Например:

        server – указано имя сервера, остальные параметры используются по умолчанию;
        tcp://server:1641 – указан протокол, имя сервера и порт;
        127.0.0.1:1541 – указан IP-адрес сервера (в формате IPv4) и порт;
        [fe10::c47b:90b7:fa32:a2fa%12] – указан IP-адрес сервера (в формате IPv6),
        при этом протокол и порт принимают значения по умолчанию.

        Для обеспечения бесперебойной работы клиентских приложений возможно указание нескольких адресов кластера.
        Для этого:
        Значением параметра Srvr может быть список адресов кластера через запятую.
        В диалоге добавления информационной базы в клиентском приложении значением свойства
        Кластер серверов 1С:Предприятия может быть список адресов кластера через запятую.
        Ref — имя информационной базы на сервере "1С:Предприятия";
        DBMS — тип используемого сервера баз данных:

        MSSQLServer — Microsoft SQL Server;
        PostgreSQL — PostgreSQL;
        IBMDB2 — IBM DB2;
        OracleDatabase — Oracle Database.

        DBSrvr — имя сервера баз данных;
        DB — имя базы данных в сервере баз данных;
        DBUID — имя пользователя сервера баз данных;
        DBPwd — пароль пользователя сервера баз данных.
        Если пароль для пользователя сервера баз данных не задан, то данный параметр можно не указывать;
        SQLYOffs — смещение дат, используемое для хранения дат в Microsoft SQL Server.
        Может принимать значения 0 или 2000. Данный параметр задавать не обязательно.
        Если не задан, принимается значение 0;
        Locale — язык (страна), (аналогично файловому варианту);
        CrSQLDB — создать базу данных в случае ее отсутствия ("Y"|"N". "Y" — создавать базу данных в случае отсутствия,
        "N" — не создавать. Значение по умолчанию — N).
        SchJobDn — в созданной информационной базе запретить выполнение регламентных созданий (Y/N).
        Значение по умолчанию — N;
        SUsr — имя администратора кластера, в котором должен быть создан начальный образ. Параметр необходимо задавать,
        если в кластере определены администраторы
        и для них аутентификация операционной системы не установлена или не подходит;
        SPwd — пароль администратора кластера.

        Для всех вариантов определены параметры:

        Usr — имя пользователя;
        Pwd — пароль;
        LicDstr — разрешить получение клиентских лицензий через сервер "1С:Предприятия" ("Y"|"N").

        "Y" — получать клиентскую лицензию через сервер "1С:Предприятия".
        Если клиентское приложение не получило программную лицензию или аппаратную лицензию из локального ключа HASP
        или из сетевого ключа HASP, то производится попытка получения клиентской лицензии через сервер 1С:Предприятия.
        "N" — не получать клиентскую лицензию через сервер "1С:Предприятия".
        Значение по умолчанию — "N".

        Zn — установка разделителей.

        ZN=<Общий реквизит 1>,<Общий реквизит 2>,...,<Общий реквизит N>

        <Общий реквизит> = [<+>|<->]<значение общего реквизита>

        [<+>|<->] - признак использования: "+" (по умолчанию) - реквизит используется; "-" - не используется;

        Если разделитель не используется, то перед значением должен быть "-".
        Если первым символом в значении разделителя содержится символ "+" или "-", то при указании его нужно удваивать.

        <значение общего реквизита> - значение общего реквизита. Если в значении разделителя присутствует запятая,
        то при указании ее нужно удваивать. Если значение разделителя пропущено,
        но разделитель должен использоваться, то используется символ "+".

        Разделители разделяются запятой.

        Например:

        "Zn=-ПервыйРазделитель,+,---ТретийРазделитель", что означает:

        Первый разделитель выключен, значение – "ПервыйРазделитель",

        Второй разделитель включен, значение – пустая строка,

        Третий разделитель выключен, значение – "-ТретийРазделитель".

        prmod — запуск в режиме привилегированного сеанса. Разрешен аутентифицированному пользователю,
        имеющему административные права. Журнал регистрации фиксирует установку или отказ в возможности
        установки режима привилегированного сеанса. prmod=1 - привилегированный сеанс устанавливается.

        :param connection_string: Строка соединения, используемая 1С:Предприятием для соединения с информационной базой.
        :return: Внешнее соединение.
        """
        return self.V8_COM_CONNECTOR.Connect(connection_string)

    def connect_agent(self, identity: str) -> 'ServerAgentConnection':
        """
        Выполняет подсоединение к агенту сервера 1С:Предприятия 8, работающему на указанном серверном компьютере.
        Если подсоединение невозможно, то вызывается исключение.
        :param identity: Идентификатор протокола (по умолчанию tcp), имя компьютера или IP-адрес агента сервера (обязательно),
        номер IP-порта агента сервера (по умолчанию 1540).
        Например, значением параметра могут быть следующие строки:
        «server1», «tcp://server1», «tcp://server1:1540», «server1:1540»
        :return: Соединение с агентом сервера
        """
        return ServerAgentConnection(self.V8_COM_CONNECTOR.ConnectAgent(identity))

    def connect_working_process(self, identity: str) -> 'WorkingProcessConnection':
        """
        Создает административное соединение с рабочим процессом кластера серверов 1С:Предприятия 8.
        :param identity: Имя или IP-адрес рабочего процесса, с которым должно быть установлено соединение,
        в формате: <протокол>://<адрес_или_имя>:<порт>
        Например:
        testcomp
        tcp://testcomp
        tcp://testcomp:2354
        tcp://43.73.34.11:5342.
        :return: Соединение с рабочим процессом
        """
        return WorkingProcessConnection(self.V8_COM_CONNECTOR.ConnectWorkingProcess(identity))


class COMObjectWrapper:

    def __init__(self, iv8obj):
        self._iv8obj = iv8obj

    def get_underlying_com_object(self):
        return self._iv8obj


class ServerAgentConnection(COMObjectWrapper):
    """
    Соединение с агентом сервера. С его помощью можно управлять кластерами.
    Представляет собой объект с интерфейсом IV8AgentConnection.
    """
    def __init__(self, iv8_agent_connection):
        super().__init__(iv8_agent_connection)

    def authenticate(self, cluster, login, password):
        """
        Выполняет аутентификацию администратора кластера серверов.
        Все методы данного объекта, для которых необходима аутентификация администратора кластера серверов,
        могут быть выполнены только после успешного выполнения этого метода
        :param cluster: Кластер серверов. Может быть получен при помощи методов
        GetServerWorkingProcesses или CreateWorkingProcessInfo
        :param login: Имя администратора кластера серверов. Пустая строка означает,
        что необходимо выполнить аутентификацию администратора по умолчанию
        (если в кластере не зарегистрирован ни один администратор) или
        аутентификацию пользователем операционной системы
        (если администратору кластера разрешена аутентификация пользователем операционной системы)
        :param password: Пароль пользователя для аутентификации пользователя паролем.
        Пользователь будет аутентифицирован, если совпадает его имя и пароль,
        и пользователю разрешена аутентификация паролем.
        """
        self._iv8obj.Authenticate(cluster.get_underlying_com_object(), login, password)

    def get_clusters(self) -> List['Cluster']:
        """
        Позволяет получить список кластеров, зарегистрированных на центральном сервере.
        :return: Массив объектов Кластер серверов
        """
        return [Cluster(c) for c in self._iv8obj.GetClusters()]

    def get_infobases(self, cluster: 'Cluster') -> List['InfobaseShort']:
        """
        Получает массив информационных баз, зарегистрированных в кластере.
        Для успешного выполнения метода необходима аутентификация одного из администраторов кластера.
        Про каждую информационную базу выдается только такая информация,
        для получения которой не требуется аутентификация пользователя информационной базы.
        Получение всех параметров зарегистрированных информационных баз,
        а так же создание и удаление информационных баз может быть выполнено только посредством
        интерфейса Соединение с рабочим процессом после аутентификации пользователей.
        :param cluster: Кластер серверов, для которого необходимо получить список информационных баз.
        Может быть элементом полученного методом GetClusters массива кластеров,
        зарегистрированных в текущем центральном сервере.
        Еще кластер может быть создан методом CreateClusterInfo с последующим заполнением его свойств.
        :return: Массив кратких описаний информационных баз.
        """
        return [InfobaseShort(ib) for ib in self._iv8obj.GetInfoBases(cluster.get_underlying_com_object())]

    def get_infobase_sessions(self, cluster: 'Cluster', infobase: 'InfobaseShort') -> List['Session']:
        """
        Получить список сеансов информационной базы.
        :param cluster: Кластер серверов, для которого необходимо получить список сеансов.
        :param infobase: Информационная база, для которой необходимо получить список сеансов.
        :return: Массив, содержащий объекты Сеанс.
        """
        return [Session(s) for s in self._iv8obj.GetInfoBaseSessions(
            cluster.get_underlying_com_object(), infobase.get_underlying_com_object())]

    def get_sessions(self, cluster: 'Cluster') -> List['Session']:
        """
        Получает список сеансов, работающих с данным кластером.
        :param cluster: Кластер, для которого необходимо получить список сеансов.
        :return: Массив, который содержит список объектов Сеанс.
        """
        return [Session(s) for s in self._iv8obj.GetSessions(cluster.get_underlying_com_object())]

    def get_working_processes(self, cluster: 'Cluster') -> List['WorkingProcess']:
        """
        Позволяет получить массив рабочих процессов, зарегистрированных в заданном кластере.
        Для успешного выполнения метода необходима аутентификация одного из администраторов кластера.
        :param cluster: Кластер серверов, для которого должен быть получен массив рабочих процессов.
        :return: Массив рабочих процессов. Каждый рабочий процесс является объектом с интерфейсом Рабочий процесс
        """
        return [WorkingProcess(w) for w in self._iv8obj.GetWorkingProcesses(cluster.get_underlying_com_object())]

    def terminate_session(self, cluster: 'Cluster', session: 'Session', message: str = ''):
        """
        Удаляет сеанс. Попытка обращения к кластеру серверов от имени удаленного сеанса вызывает исключение.
        :param cluster: Кластер, из которого должен быть удален сеанс.
        :param session: Сеанс, который должен быть удален.
        :param message: Сообщение для пользователя, которое содержит причину прерывания текущего серверного вызова.
        Значение по умолчанию: "Выполнение текущей операции прервано администратором".
        """
        self._iv8obj.TerminateSession(cluster.get_underlying_com_object(), session.get_underlying_com_object(), message)


class Cluster(COMObjectWrapper):
    """
    Объект с интерфейсом IClusterInfo. Содержит параметры кластера серверов 1С:Предприятия.
    Может быть получен методами GetClusters или CreateClusterInfo
    """
    def __init__(self, iv8_cluster):
        super().__init__(iv8_cluster)

    @property
    def cluster_name(self) -> str:
        """
        Содержит удобочитаемое имя кластера серверов 1С:Предприятия
        Если при регистрации уже существующего реестра имя не указано или указано отличное от того,
        которое содержится в реестре, то после выполнения метода RegCluster значение свойства будет обновлено.

        Использование: Чтение и запись.
        """
        return self._iv8obj.ClusterName

    @cluster_name.setter
    def cluster_name(self, arg: str):
        self._iv8obj.ClusterName = arg

    @property
    def errors_count_threshold(self) -> int:
        """
        Допустимое отклонение количества ошибок сервера.
        Свойство указывает, какое отклонение количества ошибок (в %) от среднего показателя
        по рабочим процессам данного кластера серверов за последние 5 минут является подозрительным
        и может свидетельствовать о наличии проблем. При наличии отклонения процесс признается проблемным.
        Если значение равно 0, то проверка отклонения количества ошибок не выполняется.

        Использование: Чтение и запись.
        """
        return self._iv8obj.ErrorsCountThreshold

    @errors_count_threshold.setter
    def errors_count_threshold(self, arg: int):
        self._iv8obj.ErrorsCountThreshold = arg

    @property
    def expiration_timeout(self) -> int:
        """
        Время принудительного завершения.
        Интервал времени (в секундах), по истечении которого выключенный процесс будет завершен принудительно даже,
        если еще имеются установленные с ним соединения.
        Если процесс выключен автоматически по достижении времени перезапуска,
        то после принудительного завершения процесс будет удален из кластера.
        Если значение равно 0, то принудительное завершение не производится.

        Использование: Чтение и запись.
        """
        return self._iv8obj.ExpirationTimeout

    @expiration_timeout.setter
    def expiration_timeout(self, arg: int):
        self._iv8obj.ExpirationTimeout = arg

    @property
    def hostname(self) -> str:
        """
        Имя (символический или IP-адрес) компьютера,
        на котором расположен реестр кластера и процесс главного менеджера кластера.

        Использование: Чтение и запись.
        """
        return self._iv8obj.HostName

    @hostname.setter
    def hostname(self, arg: str):
        self._iv8obj.HostName = arg

    @property
    def kill_problem_processes(self) -> bool:
        """
        Режим принудительного завершения проблемных процессов.
        Если система мониторинга кластера признает менеджер кластера или рабочий процесс проблемным,
        то в технологическом журнале выводится событие ATTN. Если данное свойство имеет значение Истина,
        то проблемный процесс принудительно завершается средствами операционной системы с записью дампа.

        Использование: Только чтение
        """
        return self._iv8obj.KillProblemProcesses

    @property
    def lifetime_limit(self) -> int:
        """
        Период перезапуска рабочих процессов кластера.
        Интервал времени (в секундах), по истечении которого будет выполнен перезапуск рабочих процессов кластера.
        Если рабочий процесс активен в течение этого времени, то будет выполнен запуск нового процесса,
        а старый процесс будет выключен. Выключенный процесс будет обслуживать соединения,
        установленные ранее, не устанавливая при том новых соединений.
        Если значение равно 0, то перезапуск рабочих процессов не производится.

        Использование: Чтение и запись.
        """
        return self._iv8obj.LifeTimeLimit

    @lifetime_limit.setter
    def lifetime_limit(self, arg: int):
        self._iv8obj.LifeTimeLimit = arg

    @property
    def load_balancing_mode(self) -> int:
        """
        Режим выбора рабочего процесса для соединения.
        0 - приоритет выбора по доступной производительности;
        1 - приоритет выбора по доступной памяти;
        Значение по умолчанию 0.

        Использование: Только чтение
        """
        return self._iv8obj.LoadBalancingMode

    @property
    def main_port(self) -> int:
        """
        Содержит номер основного IP-порта менеджера кластера.

        Использование: Чтение и запись.
        """
        return self._iv8obj.MainPort

    @main_port.setter
    def main_port(self, arg: int):
        self._iv8obj.MainPort = arg

    @property
    def max_memory_size(self) -> int:
        """
        Определяет объем виртуального адресного пространства (в килобайтах),
        занятого рабочим процессом, превышение которого приведет к перезапуску рабочего процесса.
        Если значение равно 0, то объем занятого процессом виртуального адресного пространства не ограничен.

        Использование: Чтение и запись.
        """
        return self._iv8obj.MaxMemorySize

    @max_memory_size.setter
    def max_memory_size(self, arg: int):
        self._iv8obj.MaxMemorySize = arg

    @property
    def max_memory_time_limit(self) -> int:
        """
        Определяет максимальный период превышения критического объема памяти в секундах.
        Рабочий процесс будет перезапущен, если объем виртуального адресного пространства
        рабочего процесса постоянно превышает критический объем памяти в течение указанных в свойстве секунд.

        Использование: Чтение и запись.
        """
        return self._iv8obj.MaxMemoryTimeLimit

    @max_memory_time_limit.setter
    def max_memory_time_limit(self, arg: int):
        self._iv8obj.MaxMemoryTimeLimit = arg

    @property
    def security_level(self) -> int:
        """
        Определяет уровень безопасности соединений менеджера кластера.
        0 - незащищенное соединение,
        1 - защищенное соединение только в процессе аутентификации администратора,
        2 - защищенное соединение в течение всего сеанса.

        Использование: Чтение и запись.
        """
        return self._iv8obj.SecurityLevel

    @security_level.setter
    def security_level(self, arg: int):
        self._iv8obj.SecurityLevel = arg

    @property
    def session_fault_tolerance_level(self) -> int:
        """
        Определяет уровень отказоустойчивости кластера: количество рабочих серверов кластера,
        выход из строя которых не приводит к аварийному завершению сеансов.

        Использование: Чтение и запись.
        """
        return self._iv8obj.SessionFaultToleranceLevel

    @session_fault_tolerance_level.setter
    def session_fault_tolerance_level(self, arg: int):
        self._iv8obj.SessionFaultToleranceLevel = arg


class WorkingProcess(COMObjectWrapper):
    """
    Представляет собой объект с интерфейсом ISrvrProcessInfo. Содержит параметры рабочего процесса.
    Может быть получен методами GetWorkingProcesses или CreateWorkingProcessInfo.
    """
    def __init__(self, iv8_working_process):
        super().__init__(iv8_working_process)

    @property
    def available_performance(self) -> int:
        """
        Средняя за последние 5 минут доступная производительность.
        Определяется по времени реакции рабочего процесса на эталонный запрос.
        В соответствии с доступной производительностью кластер серверов принимает решение
        о распределении клиентов между рабочими процессами.
        """
        return self._iv8obj.AvailablePerfomance

    @property
    def avg_call_time(self) -> float:
        """
        Показывает среднее время обслуживания рабочим процессом одного клиентского обращения.
        Оно складывается из: значений свойств AvgServerCallTime, AvgDBCallTime, AvgLockCallTime, AvgBackCallTime.
        """
        return self._iv8obj.AvgCallTime

    @property
    def avg_db_call_time(self) -> float:
        """
        Показывает среднее время, затрачиваемое рабочим процессом на обращения к серверу баз данных
        при выполнении одного клиентского обращения.
        """
        return self._iv8obj.AvgDBCallTime

    @property
    def avg_lock_call_time(self) -> float:
        """
        Показывает среднее время обращения к менеджеру блокировок.
        """
        return self._iv8obj.AvgLockCallTime

    @property
    def avg_server_call_time(self) -> float:
        """
        Показывает среднее время, затрачиваемое самим рабочим процессом на выполнение одного клиентского обращения.
        """
        return self._iv8obj.AvgServerCallTime

    @property
    def avg_threads(self) -> float:
        """
        Показывает среднее количество клиентских потоков, исполняемых рабочим процессом кластера.
        """
        return self._iv8obj.AvgThreads

    @property
    def capacity(self) -> int:
        """
        Относительная производительность процесса. Может находиться в диапазоне от 1 до 1000.
        Используется в процессе выбора рабочего процесса, к которому будет подсоединен очередной клиент.
        Клиенты распределяются между рабочими процессами пропорционально производительности рабочих процессов.
        """
        return self._iv8obj.Capacity

    @property
    def connections(self) -> int:
        """
        Количество соединений рабочего процесса с пользовательскими приложениями.
        """
        return self._iv8obj.Connections

    @property
    def hostname(self) -> str:
        """
        Содержит имя или IP-адрес компьютера, на котором должен быть запущен рабочий процесс.
        """
        return self._iv8obj.HostName

    @property
    def is_enable(self) -> bool:
        """
        Устанавливается кластером при необходимости запустить или остановить рабочий процесс.
        Истина - процесс должен быть запущен и будет запущен при возможности.
        Ложь - процесс должен быть остановлен и будет остановлен после отсоединения всех пользователей
        или после истечения времени, заданного свойством ExpirationTimeout объекта Кластер серверов.
        """
        return self._iv8obj.IsEnable

    @property
    def license(self) -> 'License':
        """
        Содержит информацию о серверной лицензии, используемой рабочим процессом.
        Неопределено - рабочий процесс не использует серверную лицензию.
        """
        return self._iv8obj.License

    @property
    def main_port(self) -> int:
        """
        Содержит номер основного IP-порта рабочего процесса. Этот порт выделяется динамически
        при старте рабочего процесса из диапазонов портов, определенных для соответствующего рабочего сервера.
        """
        return self._iv8obj.MainPort

    @property
    def memory_excess_time(self) -> int:
        """
        Содержит время, в течение которого объем виртуальной памяти рабочего процесса превышает критическое значение,
        установленное для кластера, в секундах.
        """
        return self._iv8obj.MemoryExcessTime

    @property
    def memory_size(self) -> int:
        """
        Содержит объем виртуальной памяти, занимаемой рабочим процессом, в килобайтах.
        """
        return self._iv8obj.MemorySize

    @property
    def pid(self) -> int:
        """
        Идентификатор активного рабочего процесса в терминах операционной системы.
        """
        return self._iv8obj.PID

    @property
    def running(self) -> int:
        """
        Состояние рабочего процесса.
        0 – процесс неактивен (либо не загружен в память, либо не может выполнять клиентские запросы);
        1 – процесс активен (работает).
        """
        return self._iv8obj.Running

    @property
    def SelectionSize(self) -> int:
        """
        Количество вызовов, по которым посчитана статистика.
        """
        return self._iv8obj.SelectionSize

    def started_at(self):
        """
        Содержит момент запуска рабочего процесса. Если процесс не запущен, то содержит нулевую дату.
        """
        return self._iv8obj.StartedAt

    def use(self) -> int:
        """
        Определяет использование рабочего процесса кластером. Устанавливается администратором.
        Возможные значения:
        0 – не использовать, процесс не должен быть запущен;
        1 – использовать, процесс должен быть запущен;
        2 – использовать как резервный, процесс должен быть запущен только
        при невозможности запуска процесса со значением 1 этого свойства.
        """
        return self._iv8obj.User


class WorkingProcessConnection(COMObjectWrapper):
    """
    Позволяет выполнять административные функции над рабочим процессом кластера.
    Представляет собой объект с интерфейсом IV8ServerConnection.
    """
    def __init__(self, iv8_working_process_connection):
        super().__init__(iv8_working_process_connection)

    def add_authentication(self, login: str, password: str):
        """
        Выполняет аутентификацию.
        :param login: Имя администратора информационной базы.
        Административный доступ разрешен только к тем информационным базам,
        в которых зарегистрирован пользователь с таким именем и он имеет право "Администратор".
        :param password: Пароль администратора информационной базы.
        """
        self._iv8obj.AddAuthentication(login, password)

    def authenticate_admin(self, login: str, password: str):
        """
        Выполняет аутентификацию администратора кластера.
        Администратор кластера должен быть аутентифицирован для создания в этом кластере новой информационной базы.
        :param login: Имя администратора кластера.
        :param password: Пароль администратора кластера.
        """
        self._iv8obj.AuthenticateAdmin(login, password)

    def connect(self, infobase: 'Infobase', login: str, password: str):
        """
        Устанавливает соединение с информационной базой, зарегистрированной в кластере серверов 1С:Предприятия
        :param infobase: Информационная база, для которой должно быть установлено значение свойства Name.
        :param login: Имя пользователя информационной базы 1С:Предприятия, который устанавливает соединение.
        :param password: Пароль пользователя информационной базы. Если пароля нет, то нужно указать пустую строку.
        :return: Внешнее соединение.
        """
        return self._iv8obj.Connect(infobase.get_underlying_com_object(), login, password)

    def create_infobase(self, infobase: 'Infobase', mode: int) -> 'Infobase':
        """
        Создает информационную базу с заданными параметрами. Требуется аутентификация администратора кластера.
        :param infobase: Информационная база. Все свойства, необходимые для создания информационной базы
        (Name, dbServerName, dbName, dbUser, dbPassword, Locale, [DateOffset]) должны быть заполнены.
        :param mode: Режим создания информационной базы:
        0 - при создании информационной базы базу данных не создавать;
        1 - при создании информационной базы создавать базу данных.
        :return: Информационная база
        """
        return Infobase(self._iv8obj.CreateInfoBase(infobase.get_underlying_com_object(), mode))

    def create_infobase_info(self) -> 'Infobase':
        """
        Создает объект описания одной информационной базы. Аутентификации не требуется.
        :return: Информационная база. Значения всех строковых свойств объекта равны пустым строкам, а числовых – нулям.
        Свойствам созданного объекта могут быть явно установлены значения.
        После этого объект можно использовать в качестве значений входных параметров соответствующих методов.
        """
        return Infobase(self._iv8obj.CreateInfoBaseInfo())

    def disconnect(self, connection: 'InfobaseConnection'):
        """
        Разрывает соединение клиента с рабочим процессом.
        После разрыва соединения соответствующее клиентское приложение завершится аварийно.
        :param connection: Описание соединения с информационной базой. Объект может быть получен ка элемент массива,
        возвращаемого методом GetInfoBaseConnections.
        """
        self._iv8obj.Disconnect(connection.get_underlying_com_object())

    def drop_infobase(self, infobase: 'Infobase', mode: int):
        """
        Удаляет информационную базу. Для выполнения требуются административные права в удаляемой информационной базе.
        :param infobase: Информационная база, для которой должно быть установлено значение свойства Name.
        :param mode: Режим удаления информационной базы:
        0 - при удалении информационной базы базу данных не удалять;
        1 - при удалении информационной базы удалить базу данных;
        2 - при удалении информационной базы очистить базу данных.
        """
        self._iv8obj.DropInfoBase(infobase.get_underlying_com_object(), mode)

    def get_infobase_connections(self, infobase: 'Infobase') -> list:
        """
        Получает массив соединений информационной базы.
        Для выполнения требуются административные права на информационную базу.
        :param infobase: Информационная база, для которой должен быть получен список соединений.
        :return: Массив, содержащий объекты Соединение.
        """
        return [InfobaseConnection(ic) for ic
                in self._iv8obj.GetInfoBaseConnections(infobase.get_underlying_com_object())]

    def get_infobases(self) -> List['Infobase']:
        """
        Получает массив информационных баз, зарегистрированных в кластере серверов.
        Для выполнения не требуется аутентификации.
        При этом у информационной базы можно получить только значения свойств Name и Descr.
        :return: Массив, содержащий объекты Информационная база.
        """
        return [Infobase(ib) for ib in self._iv8obj.GetInfoBases()]

    def update_infobase(self, infobase: 'Infobase'):
        """
        Устанавливает новые параметры существующей информационной базы.
        :param infobase: Информационная база с новыми значениями параметров.
        Новые значения могут иметь только следующие свойства объекта:
        Descr,
        SessionsDenied,
        DBMS,
        dbServerName,
        dbName,
        dbUser,
        dbPassword,
        DeniedFrom,
        DeniedTo,
        DeniedMessage,
        DeniedParameter,
        ExternalSessionManagerConnectionString,
        ExternalSessionManagerRequired,
        LicenseDistributionAllowed,
        PermissionCode,
        SafeModeSecurityProfileName,
        ScheduledJobsDenied,
        SecurityProfileName
        """
        self._iv8obj.UpdateInfoBase(infobase.get_underlying_com_object())


class InfobaseShort(COMObjectWrapper):
    """
    Содержит параметры информационной базы 1С:Предприятия.
    Объект может быть построен программно. Для этого необходимо его создать методом CreateInfoBaseInfo
    и заполнить его свойства путем присваивания им новых значений.
    Уже заполненные объекты могут быть получены методом GetInfoBases.
    В последнем случае для чтения значений всех их свойств, кроме Name, необходимы административные права.
    Представляет собой объект с интерфейсом IInfoBaseInfo.
    """
    def __init__(self, iv8_infobase):
        super().__init__(iv8_infobase)

    def get_underlying_com_object(self):
        return self._iv8obj

    @property
    def descr(self) -> str:
        return self._iv8obj.Descr

    @descr.setter
    def descr(self, arg: str):
        self._iv8obj.Descr = arg

    @property
    def name(self) -> str:
        return self._iv8obj.Name


class Infobase(InfobaseShort):
    """
    Содержит параметры информационной базы 1С:Предприятия.
    Объект может быть построен программно. Для этого необходимо его создать методом CreateInfoBaseInfo
    и заполнить его свойства путем присваивания им новых значений.
    Уже заполненные объекты могут быть получены методом GetInfoBases.
    В последнем случае для чтения значений всех их свойств, кроме Name, необходимы административные права.
    Представляет собой объект с интерфейсом IInfoBaseInfo.
    """
    def __init__(self, iv8_infobase):
        super().__init__(iv8_infobase)

    @property
    def name(self) -> str:
        return self._iv8obj.Name

    @name.setter
    def name(self, arg: str):
        self._iv8obj.name = arg


class InfobaseConnection(COMObjectWrapper):
    """
    Содержит параметры одного соединения клиентского приложения
    с информационной базой на кластере серверов 1С:Предприятия.
    Представляет собой объект с интерфейсом IInfoBaseConnectionInfo.
    """
    def __init__(self, iv8_infobase_connection):
        super().__init__(iv8_infobase_connection)

    def get_underlying_com_object(self):
        return self._iv8obj


class Session(COMObjectWrapper):
    """
    Содержит данные об одном сеансе.
    """
    def __init__(self, iv8_session):
        super().__init__(iv8_session)


class License(COMObjectWrapper):
    """
    Содержит данные об одной лицензии.
    """
    def __init__(self, iv8_license):
        super().__init__(iv8_license)